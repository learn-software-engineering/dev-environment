[{"content":"","date":1694649600,"headings":[],"kind":"taxonomy","lang":"es","summary":"","title":"Autores","url":"/es/authors/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"binario","url":"/es/tags/binario/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"boolean-logic","url":"/es/tags/boolean-logic/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"decimal","url":"/es/tags/decimal/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"taxonomy","lang":"es","summary":"","title":"Etiquetas","url":"/es/tags/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"hexadecimal","url":"/es/tags/hexadecimal/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"intro","url":"/es/tags/intro/","year":"2023"},{"content":"La programación, en su esencia, es el acto de instruir a una máquina sobre cómo realizar una tarea específica. Es como si le estuvieras enseñando a tu perro a buscar la pelota, pero en este caso, el perro es tu computadora y la pelota es, por ejemplo, mostrar una foto en tu pantalla.\nAhora, es posible que pienses que programar es simplemente escribir líneas de código. En realidad, la programación es un proceso más amplio que incluye no solo escribir código, sino también resolver problemas, diseñar sistemas y pensar lógicamente.\nEn el universo de la programación, hay lenguajes de alto nivel y lenguajes de bajo nivel. Un lenguaje de bajo nivel, como el ensamblador, está más cerca de lo que la máquina entiende, mientras que un lenguaje de alto nivel, como Python o JavaScript, es más amigable para nosotros, los humanos. Imagina tener una conversación: los lenguajes de alto nivel son como charlar con un amigo en un café, mientras que los lenguajes de bajo nivel son como intentar comunicarte con alguien que habla un dialecto muy particular y localizado.\nAdemás, algunos lenguajes de programación son compilados y otros son interpretados. Si un lenguaje es compilado, significa que se traduce a un lenguaje que la máquina entiende antes de ser ejecutado. Por otro lado, los lenguajes interpretados son traducidos en tiempo real, mientras se ejecutan.\nBreve historia de la programación La programación no es un concepto nuevo. De hecho, ha estado con nosotros desde mucho antes de que las computadoras existieran en la forma que las conocemos hoy. Dispositivos como el ábaco y el astrolabio son ejemplos tempranos de herramientas que usamos para realizar cálculos complejos.\nPero fue con la llegada de las máquinas mecánicas, como la Máquina Analítica de Charles Babbage, que se sentaron las bases para la programación moderna. ¡Estamos hablando del siglo XIX!\nCon el paso del tiempo, nacieron lenguajes que marcaron hitos, como Fortran y COBOL. Estos lenguajes sentaron las bases para las revoluciones tecnológicas que vendrían. Con la evolución de los lenguajes, también surgieron nuevos paradigmas: primero el Procedural, luego el Orientado a Objetos y más recientemente, el Funcional.\nHoy, estamos en una era moderna, dominada por la programación para la web, móviles y la nube. Cada vez que deslizas tu dedo por la pantalla de tu celular o compras algo online, hay líneas y líneas de código trabajando detrás de escena.\nLa programación hoy La programación es el motor de nuestra sociedad moderna. Desde aplicaciones para pedir comida hasta sistemas avanzados de inteligencia artificial que ayudan en investigaciones médicas, la programación está en todas partes.\nAdemás de simplificar nuestras vidas cotidianas, la programación tiene un impacto profundo en la sociedad. Ha permitido avances en la automatización, el análisis de datos y el entretenimiento. Y lo que es aún más emocionante, es que apenas estamos rasguñando la superficie. Con los avances en inteligencia artificial, computación cuántica y el Internet de las Cosas (IoT), ¿quién sabe qué maravillas nos esperan en mundo de la programación?\n","date":1694649600,"headings":[{"anchor":"breve-historia-de-la-programación","title":"Breve historia de la programación"},{"anchor":"la-programación-hoy","title":"La programación hoy"}],"kind":"section","lang":"es","summary":"La programación, en su esencia, es el acto de instruir a una máquina sobre cómo realizar una tarea específica. Es como si le estuvieras enseñando a tu perro a buscar la pelota, pero en este caso, el perro es tu computadora y la pelota es, por ejemplo, mostrar una foto en tu pantalla.\nAhora, es posible que pienses que programar es simplemente escribir líneas de código. En realidad, la programación es un proceso más amplio que incluye no solo escribir código, sino también resolver problemas, diseñar sistemas y pensar lógicamente.","title":"Introducción","url":"/es/programming/0100-intro/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"Julián Nonino","url":"/es/authors/jnonino/","year":"2023"},{"authors":["Julián Nonino"],"content":"La lógica booleana, nombrada en honor a George Boole, un matemático inglés del siglo XIX, es un sistema matemático que se ocupa de operaciones que tienen solo dos resultados posibles: verdadero o falso, representados generalmente como 1 y 0, respectivamente1. En su obra \u0026ldquo;An Investigation of the Laws of Thought\u0026rdquo;, Boole estableció las bases de esta lógica, presentando un sistema algebraico que podría utilizarse para representar estructuras lógicas.\nOperaciones Booleanas Dentro de la lógica booleana, existen operaciones fundamentales que permiten manipular y combinar estas expresiones binarias:\nAND (Y): Esta operación devuelve verdadero (1) solo si ambas entradas son verdaderas. Por ejemplo, si tenemos dos interruptores, ambos deben estar en la posición encendido para que una luz se encienda.\nOR (O): Devuelve verdadero si al menos una de las entradas es verdadera. Siguiendo con el ejemplo de los interruptores, con que uno de ellos esté encendido, la luz se iluminará.\nNOT (NO): Es una operación unaria, lo que significa que solo tiene una entrada. Simplemente invierte el valor de entrada. Si le das un 1, devuelve un 0 y viceversa.\nNAND (NO Y): Es la negación de AND. Solo devuelve falso si ambas entradas son verdaderas.\nNOR (NO O): Es la negación de OR. Devuelve verdadero solo si ambas entradas son falsas.\nXOR (O exclusivo): Devuelve verdadero si las entradas son diferentes. Si ambas son iguales, devuelve falso.\nXNOR (NO O exclusivo): Es la negación de XOR. Devuelve verdadero si ambas entradas son iguales.\nLa importancia de esta lógica en computación y programación La computación moderna, en su esencia, es la manipulación de bits, esos unos y ceros que mencionamos. Cada operación que realiza una computadora, desde simples cálculos hasta la renderización de gráficos complejos, implica operaciones booleanas en algún nivel2.\nEn programación, la lógica booleana se utiliza en estructuras de control, como condiciones (if, else) y bucles, permitiendo a los programas tomar decisiones basadas en ciertas condiciones.\nTablas de verdad: el mapa de la lógica Booleana Una tabla de verdad es una representación gráfica de una operación booleana. Enumera todas las combinaciones posibles de entradas y muestra el resultado de la operación para cada combinación3.\nPor ejemplo,\nA B A AND B A OR B A XOR B A NOR B A NAND B NOT A A NXOR B 1 1 1 1 0 0 0 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 1 1 Conclusiones La lógica booleana es mucho más que un conjunto de reglas matemáticas abstractas. Es el lenguaje fundamental de las máquinas, el código que subyace a la era digital en la que vivimos. Al comprender sus principios, no solo nos volvemos más adeptos a trabajar con tecnología, sino que también adquirimos una apreciación más profunda de las estructuras que sustentan nuestro mundo digital.\nReferencias Boole, G. (1854). An Investigation of the Laws of Thought. Londres: Walton and Maberly.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTanenbaum, A. (2012). Estructura de Computadoras. Buenos Aires: Prentice Hall.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMinsky, M. (1967). Computation: Finite and Infinite Machines. Buenos Aires: Prentice-Hall.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1694649600,"headings":[{"anchor":"conclusiones","title":"Conclusiones"},{"anchor":"la-importancia-de-esta-lógica-en-computación-y-programación","title":"La importancia de esta lógica en computación y programación"},{"anchor":"operaciones-booleanas","title":"Operaciones Booleanas"},{"anchor":"referencias","title":"Referencias"},{"anchor":"tablas-de-verdad-el-mapa-de-la-lógica-booleana","title":"Tablas de verdad: el mapa de la lógica Booleana"}],"kind":"page","lang":"es","series":["Programming"],"summary":"En la vida, a menudo buscamos certezas. ¿Es cierto o falso que va a llover mañana? ¿Es correcto o incorrecto actuar de cierta manera? Esta dicotomía, esta división entre dos estados opuestos, se encuentra en el núcleo mismo de una rama esencial de las matemáticas y la informática: la lógica booleana.","tags":["intro","programming","boolean-logic"],"title":"Lógica Booleana","url":"/es/programming/0100-intro/0103-boolean-logic/","year":"2023"},{"content":"Bienvenidos a nuestra serie integral para emprender tu camino en el mundo de la programación. Creada para aquellos nuevos en el mundo de la codificación, esta colección de artículos ofrece un enfoque paso a paso para comprender los fundamentos de la programación. Empezaremos desde lo básico, como entender variables, tipos de datos y estructuras de control, hasta explorar gradualmente temas más complejos como algoritmos, estructuras de datos y principios de diseño de software.\nYa sea que nunca hayas escrito una línea de código o estés buscando una revisión estructurada, en esta serie encontraras la explicaciones y guías que necesitas para desenvolverte en la industria del software. Nuestros tutoriales prácticos, explicaciones claras y ejemplos aplicados tienen como objetivo hacer que el proceso de aprendizaje sea a la vez atractivo e intuitivo. Unite en esta aventura de codificación con nosotros, y al final, estarás equipado con las habilidades y conocimientos para enfrentar desafíos reales de programación.\n","date":1694649600,"headings":[],"kind":"section","lang":"es","summary":"Bienvenidos a nuestra serie integral para emprender tu camino en el mundo de la programación. Creada para aquellos nuevos en el mundo de la codificación, esta colección de artículos ofrece un enfoque paso a paso para comprender los fundamentos de la programación. Empezaremos desde lo básico, como entender variables, tipos de datos y estructuras de control, hasta explorar gradualmente temas más complejos como algoritmos, estructuras de datos y principios de diseño de software.","title":"Programación","url":"/es/programming/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"programming","url":"/es/tags/programming/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"Programming","url":"/es/series/programming/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"taxonomy","lang":"es","summary":"","title":"Series","url":"/es/series/","year":"2023"},{"authors":["Julián Nonino"],"content":"El sistema decimal: la base de nuestra cotidianidad Desde pequeños, nos enseñan a contar usando diez dígitos: del 0 al 9. Este sistema, conocido como decimal, es la base de casi todas nuestras actividades matemáticas y financieras, desde sumar cuentas hasta calcular intereses en el banco1. Tiene su origen en la cantidad de dedos que tenemos en las manos, lo que lo convierte en el sistema más intuitivo y natural para nosotros. Pero lo que lo hace especial es su naturaleza posicional.\nPara comprender este concepto, consideremos el número 237:\nEl 7, situado a la derecha, está en la posición de las unidades. Es decir, \\(7 \\times 10^0\\) (cualquier número elevado a la potencia de 0 es 1). Por lo tanto, su valor es simplemente 7. El 3, en la posición del medio, representa las decenas, es decir, \\(3 \\times 10^1 = 3 \\times 10 = 30\\) . El 2, el número más a la izquierda, está en la posición de las centenas, traduciéndose a \\(2 \\times 10^2 = 2 \\times 100 = 200\\) . Si sumamos estos valores,\n$$2 \\times 10^2 \u0026#43; 3 \\times 10^1 \u0026#43; 7 \\times 10^0 = 200 \u0026#43; 30 \u0026#43; 7 = 237$$ El sistema binario: el lenguaje secreto de las computadoras Si bien el sistema decimal domina nuestra vida cotidiana, las máquinas que usamos todos los días, desde nuestros celulares hasta las computadoras, operan en un mundo completamente diferente: el mundo binario. En este sistema, solo existen dos dígitos: 0 y 1. A primera vista, puede parecer limitante, pero este sistema es la esencia de la electrónica digital. Los dispositivos electrónicos, con sus millones de transistores, operan usando estos dos estados: encendido (1) y apagado (0)2.\nA pesar de su aparente simplicidad, el sistema binario puede representar cualquier cantidad o información que el sistema decimal pueda expresar. Por ejemplo, el número decimal 5 se representa como 101 en binario.\nEl sistema binario, con sus unos y ceros, opera de manera similar al sistema decimal, pero en lugar de potencias de 10, usa potencias de 2.\nTomemos el número binario 1011:\nEl bit más a la derecha representa \\(1 \\times 2^0 = 1\\) El siguiente bit representa \\(1 \\times 2^1 = 2\\) Luego viene \\(0 \\times 2^2 = 0\\) El bit más a la izquierda en este número representa \\(1 \\times 2^3 = 8\\) Entonces, 1011 en binario se traduce a decimal de la siguiente manera:\n$$1011 = 1 \\times 2^3 \u0026#43; 0 \\times 2^2 \u0026#43; 1 \\times 2^1 \u0026#43; 1 \\times 2^0 = 8 \u0026#43; 0 \u0026#43; 2 \u0026#43; 1 = 11$$ El sistema hexadecimal: un puente entre humanos y máquinas Mientras que el sistema binario es perfecto para las máquinas, puede ser un poco engorroso para nosotros, especialmente cuando tratamos con números binarios largos. Aquí es donde entra el sistema hexadecimal, que utiliza dieciséis dígitos distintos: 0-9 y A-F, donde A representa 10, B es 11, y así sucesivamente hasta F que es 153.\nEl hexadecimal es especialmente útil porque proporciona una forma más compacta de representar números binarios. Cada dígito hexadecimal corresponde a exactamente cuatro dígitos binarios (bits). Por ejemplo pensemos en la representación en binario del número 41279 y como el sistema hexadecimal consigue una representación más compacta:\n$$41279 = 1010 0001 0011 1111 = A13F$$ Pero el sistema hexadecimal es más que una representación compacta de números binarios, es un sistema de numeración posicional como el decimal o binario con base 16 en lugar de 10 o 2. Veamos como conseguir la representación decimal del número del ejemplo anterior (A13F).\nEl dígito más a la derecha representa \\(F \\times 16^0 = 15 \\times 16^0 = 15\\) El siguiente representa \\(3 \\times 16^1 = 48\\) Luego viene \\(1 \\times 16^2 = 256\\) El dígito más a la izquierda en este número representa \\(A \\times 16^3 = 10 \\times 16^3 = 40960\\) Entonces, A13F en hexadecimal se traduce a decimal de la siguiente manera:\n$$A13F = A \\times 16^3 \u0026#43; 1 \\times 16^2 \u0026#43; 3 \\times 16^1 \u0026#43; F \\times 16^0 = 10 \\times 4096 \u0026#43; 1 \\times 256 \u0026#43; 3 \\times 16 \u0026#43; 15 \\times 1 = 40960 \u0026#43; 256 \u0026#43; 48 \u0026#43; 15 = 41279$$ Conclusión Los sistemas de numeración son como lentes a través de los cuales vemos y entendemos el mundo de las matemáticas y la computación. Aunque en nuestra vida diaria el sistema decimal sea el rey, es esencial apreciar y comprender los sistemas binario y hexadecimal, especialmente en esta era digital.\nAsí que, la próxima vez que estés frente a tu computadora o usando una app en tu celular, recordá que detrás de esa interfaz amigable, hay un mundo binario en pleno funcionamiento, y que el sistema hexadecimal actúa como un traductor entre ese mundo y nosotros.\nReferencias Ifrah, G. (2000). Historia universal de las cifras. Buenos Aires: Editorial Taurus.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTanenbaum, A. (2012). Estructura de Computadoras. Buenos Aires: Prentice Hall.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nKnuth, D. (2007). El Arte de Programar Computadoras: Sistemas de numeración. Buenos Aires: Ediciones Omega.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1694649600,"headings":[{"anchor":"conclusión","title":"Conclusión"},{"anchor":"el-sistema-binario-el-lenguaje-secreto-de-las-computadoras","title":"El sistema binario: el lenguaje secreto de las computadoras"},{"anchor":"el-sistema-decimal-la-base-de-nuestra-cotidianidad","title":"El sistema decimal: la base de nuestra cotidianidad"},{"anchor":"el-sistema-hexadecimal-un-puente-entre-humanos-y-máquinas","title":"El sistema hexadecimal: un puente entre humanos y máquinas"},{"anchor":"referencias","title":"Referencias"}],"kind":"page","lang":"es","series":["Programming"],"summary":"En nuestro día a día, estamos rodeados de números. Desde la hora que marca el reloj cuando suena la alarma por la mañana, hasta el precio del café que compramos en la esquina. Pero, ¿alguna vez te detuviste a pensar en la naturaleza de esos números? En este artículo, nos sumergiremos en el fascinante mundo de los sistemas de numeración y aprenderemos cómo, dependiendo del contexto, un número puede tener múltiples representaciones.","tags":["intro","programming","sistemas-numeracion","decimal","binario","hexadecimal"],"title":"Sistemas de numeración","url":"/es/programming/0100-intro/0102-numerical-systems/","year":"2023"},{"content":"","date":1694649600,"headings":[],"kind":"term","lang":"es","summary":"","title":"sistemas-numeracion","url":"/es/tags/sistemas-numeracion/","year":"2023"},{"content":"","date":1694563200,"headings":[],"kind":"term","lang":"es","summary":"","title":"computer","url":"/es/tags/computer/","year":"2023"},{"content":"","date":1694563200,"headings":[],"kind":"term","lang":"es","summary":"","title":"cpu","url":"/es/tags/cpu/","year":"2023"},{"content":"","date":1694563200,"headings":[],"kind":"term","lang":"es","summary":"","title":"hardware","url":"/es/tags/hardware/","year":"2023"},{"authors":["Julián Nonino"],"content":"Si alguna vez te has preguntado qué es lo que hace \u0026ldquo;tictac\u0026rdquo; dentro de esa caja metálica que llamamos computadora, estás en el lugar indicado. En esencia, una computadora es una combinación de hardware y software que trabajan juntos para llevar a cabo tareas específicas.\nEl hardware es toda la parte física de la computadora: el CPU (que es como el cerebro de la máquina), la RAM (donde la computadora guarda la información con la que está trabajando en un momento determinado), dispositivos de almacenamiento (donde se guardan los datos de forma permanente) y periféricos (como el teclado, el mouse o la pantalla)1.\nPor otro lado, el software es el conjunto de instrucciones que le dice al hardware qué hacer. Hay varios tipos de software, desde el software del sistema, como el sistema operativo que coordina todas las acciones de la máquina, hasta software de aplicación que nos permite hacer cosas como escribir documentos o jugar videojuegos2.\nEl papel del sistema operativo es crucial. Es el mediador entre el usuario y el hardware, asegurando que todo funcione armónicamente. Si el hardware fuera una orquesta, el sistema operativo sería el director que asegura que cada instrumento toque en el momento y de la manera correcta.\nEl sistema binario: el lenguaje secreto de las computadoras A diferencia de nosotros, que usamos un sistema decimal basado en diez dígitos (del 0 al 9), las computadoras usan el sistema binario, que solo tiene dos dígitos: 0 y 1. ¿Por qué? Bueno, en el nivel más básico, una computadora está hecha de millones de transistores que pueden estar en uno de dos estados: encendido o apagado. Estos estados se representan con esos dígitos: 0 para apagado y 1 para encendido3.\nLos términos \u0026ldquo;bit\u0026rdquo; y \u0026ldquo;byte\u0026rdquo; son fundamentales aquí. Un bit es la unidad más pequeña de datos en una computadora y puede tener un valor de 0 o 1. Un byte, por otro lado, es un conjunto de 8 bits y puede representar 256 valores diferentes (desde \\(00000000\\) hasta \\(11111111\\) en binario)4.\nEste sistema binario no solo representa números, sino también texto, imágenes y cualquier tipo de dato. Por ejemplo, en el código ASCII (un estándar de codificación de caracteres), la letra \u0026ldquo;A\u0026rdquo; se representa como \\(01000001\\) en binario.\nEn un artículo posterior, vamos a hablar en detalle acerca del sistema binario y otro sistema muy utilizado en el ambiente de la computación, el hexadecimal.\nMemoria y almacenamiento: donde residen nuestros datos La memoria y el almacenamiento son dos conceptos cruciales en la informática. Si bien a menudo se usan indistintamente, tienen roles muy diferentes.\nLa memoria, específicamente la RAM, es volátil. Esto significa que la información se pierde cuando apagamos la computadora. La RAM es esencialmente el \u0026ldquo;espacio de trabajo\u0026rdquo; de la computadora, donde almacena datos e instrucciones mientras está en uso. Hay varios tipos de RAM, siendo DRAM y SRAM los más comunes5.\nPor otro lado, tenemos la ROM (Memoria de Solo Lectura). A diferencia de la RAM, la ROM no es volátil y se utiliza para almacenar firmware, es decir, software que está íntimamente ligado al hardware y que no necesita cambios frecuentes.\nEn cuanto al almacenamiento, dispositivos como discos duros, SSDs y unidades flash nos permiten guardar información de manera permanente. Estos dispositivos forman parte de lo que se conoce como la jerarquía de memoria, que va desde la memoria caché (rápida pero pequeña) hasta el almacenamiento secundario (más lento pero con gran capacidad)6.\nReferencias Patterson, D. \u0026amp; Hennessy, J. (2014). Arquitectura de Computadoras. Buenos Aires: Ediciones Omega.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSilberschatz, A., Galvin, P. B., \u0026amp; Gagne, G. (2009). Fundamentos de Sistemas Operativos. Buenos Aires: Ediciones M.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTanenbaum, A. (2012). Estructura de Computadoras. Buenos Aires: Prentice Hall.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBrookshear, J. G. (2011). Ciencia de la Computación: Una visión general. Buenos Aires: Pearson Educación.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nJacob, B., Ng, S. W., \u0026amp; Wang, D. T. (2007). Arquitecturas de memoria en sistemas de computadoras. Buenos Aires: Wiley-Interscience.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSiewiorek, D. P. \u0026amp; Swarz, R. S. (2017). Principios de diseño de sistemas computacionales. Buenos Aires: Morgan Kaufmann.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":1694563200,"headings":[{"anchor":"el-sistema-binario-el-lenguaje-secreto-de-las-computadoras","title":"El sistema binario: el lenguaje secreto de las computadoras"},{"anchor":"memoria-y-almacenamiento-donde-residen-nuestros-datos","title":"Memoria y almacenamiento: donde residen nuestros datos"},{"anchor":"referencias","title":"Referencias"}],"kind":"page","lang":"es","series":["Programming"],"summary":"En el mundo actual, donde las tecnologías digitales se han convertido en una extensión de nuestras vidas diarias, resulta esencial comprender los cimientos sobre los que se construyen nuestras herramientas digitales. En esta ocasión, nos sumergiremos en el corazón de las computadoras para entender cómo funcionan y por qué son esenciales en nuestra sociedad moderna.","tags":["intro","programming","computer","hardware","software","cpu","memory"],"title":"La esencia de una computadora","url":"/es/programming/0100-intro/0101-computers/","year":"2023"},{"content":"","date":1694563200,"headings":[],"kind":"term","lang":"es","summary":"","title":"memory","url":"/es/tags/memory/","year":"2023"},{"content":"","date":1694563200,"headings":[],"kind":"term","lang":"es","summary":"","title":"software","url":"/es/tags/software/","year":"2023"},{"content":"Latest Articles Programación 14 sept. 2023 NO IMAGE Lógica Booleana En la vida, a menudo buscamos certezas. ¿Es cierto o falso que va a llover mañana? ¿Es correcto o incorrecto actuar de... Read more Programación 14 sept. 2023 NO IMAGE Sistemas de numeración En nuestro día a día, estamos rodeados de números. Desde la hora que marca el reloj cuando suena la alarma por la... Read more Programación 13 sept. 2023 NO IMAGE La esencia de una computadora En el mundo actual, donde las tecnologías digitales se han convertido en una extensión de nuestras vidas diarias,... Read more Programación 9 mar. 2023 NO IMAGE Configura tu entorno de programación Adentrarse en el mundo de la programación puede parecer una tarea titánica, especialmente cuando te encuentras frente a... Read more ","date":1693958400,"headings":[{"anchor":"latest-articles","title":"Latest Articles"}],"kind":"home","lang":"es","summary":"Build fast, responsive sites with Hugo Bootstrap Framework","title":"Learn-Software.com","url":"/es/","year":"2023"},{"authors":["Julián Nonino"],"content":" Elegir un lenguaje de programación La elección del lenguaje de programación es el primer y quizás el más crucial paso en el proceso de aprendizaje. Hay varios factores a considerar al seleccionar un lenguaje, incluyendo:\nPropósito: ¿Para qué quieres programar? Si es para desarrollo web, JavaScript o PHP podrían ser buenas opciones. Si estás interesado en la ciencia de datos, R o Python podrían ser más adecuados. Comunidad: Un lenguaje con una comunidad activa puede ser esencial para los principiantes. Una comunidad vibrante generalmente significa más recursos, tutoriales y soluciones disponibles en línea. Curva de aprendizaje: Algunos lenguajes son más fáciles de aprender que otros. Es fundamental elegir uno que coincida con tu nivel de experiencia y paciencia. Oportunidades de trabajo: Si estás buscando una carrera en programación, investigar la demanda del mercado para diferentes lenguajes puede ser útil. Aunque hay muchos lenguajes valiosos y poderosos, para este curso, hemos elegido Python. Este lenguaje es conocido por su simplicidad y legibilidad, lo que lo hace ideal para aquellos que están empezando. Además, Python cuenta con una comunidad activa y una amplia gama de aplicaciones, desde desarrollo web hasta inteligencia artificial1.\nInstalación de Python Para usuarios de Windows: Descargar el instalador: Visita el sitio web oficial de Python en https://www.python.org/downloads/windows/ Haz clic en el enlace de descarga para la última versión de Python 3.x. Ejecuta el instalador: Una vez completada la descarga, localiza y ejecuta el archivo instalador .exe. Asegúrate de marcar la casilla que dice \u0026ldquo;Agregar Python al PATH\u0026rdquo; durante la instalación. Este paso es crucial para hacer que Python sea accesible desde el Símbolo del Sistema. Sigue las indicaciones de instalación. Verifica la instalación: Abre el Símbolo del Sistema y escribe: 1python --version Esto debería mostrar la versión de Python que acabas de instalar. Para usuarios de Mac: Descargar el instalador: Visita el sitio web oficial de Python en https://www.python.org/downloads/mac-osx/ Haz clic en el enlace de descarga para la última versión de Python 3.x. Ejecuta el instalador: Una vez descargado, localiza y ejecuta el archivo .pkg. Sigue las indicaciones de instalación. Verifica la instalación: Abre la Terminal y escribe: 1python3 --version Esto debería mostrar la versión de Python que acabas de instalar. Para usuarios de Linux (Ubuntu/Debian): Actualiza los paquetes: 1sudo apt update Instala Python: 1sudo apt install python3 Verifica la instalación: Después de la instalación, puedes comprobar la versión de Python instalada escribiendo: 1python3 --version Entornos de Desarrollo Integrado (IDEs) Un IDE es una herramienta que facilita el desarrollo de aplicaciones al combinar comúnmente utilizadas en un solo software: editor de código, compilador, depurador, entre otros. Elegir el IDE adecuado puede hacer que el proceso de programación sea más fluido y eficiente.\nAl evaluar IDEs, considera:\nCompatibilidad con el lenguaje: No todos los IDEs son compatibles con todos los lenguajes de programación. Características: Algunos IDEs ofrecen funcionalidades como autocompletado, resaltado de sintaxis y herramientas de depuración. Extensiones y plugins: La posibilidad de personalizar y extender tu IDE a través de plugins puede ser muy útil. Precio: Hay IDEs gratuitos y otros de pago. Evalúa si las características adicionales de un IDE de pago justifican el costo. Para este curso, hemos seleccionado Visual Studio Code (VS Code). Es un IDE popular que es gratuito y de código abierto. Es conocido por su interfaz sencilla, amplia gama de plugins y capacidad para manejar múltiples lenguajes de programación2. Su comunidad activa garantiza actualizaciones regulares y una amplia gama de recursos de aprendizaje.\nInstalación de Visual Studio Code Para usuarios de Windows: Descargar el instalador: Visita el sitio web oficial de VS Code en https://code.visualstudio.com/ Haz clic en el botón \u0026ldquo;Descargar para Windows\u0026rdquo;. Ejecuta el instalador: Una vez completada la descarga, localiza y ejecuta el archivo instalador .exe. Sigue las indicaciones de instalación, incluyendo aceptar el acuerdo de licencia y elegir la ubicación de instalación. Inicia VS Code: Tras la instalación, puedes encontrar VS Code en tu menú de inicio. Lánzalo, ¡y estarás listo para comenzar a programar! Para usuarios de Mac: Descargar el instalador: Visita el sitio web oficial de VS Code en https://code.visualstudio.com/ Haz clic en el botón \u0026ldquo;Descargar para Mac\u0026rdquo;. Instala VS Code: Una vez descargado, abre el archivo .zip. Arrastra la aplicación Visual Studio Code .app a la carpeta Aplicaciones, para que esté disponible en el Launchpad. Inicia VS Code: Usa la búsqueda de Spotlight o navega hasta tu carpeta de Aplicaciones para iniciar VS Code. Para usuarios de Linux (Ubuntu/Debian): Actualiza los paquetes e instala las dependencias: 1sudo apt update 2sudo apt install software-properties-common apt-transport-https wget **Descarga e instala la claves necesarias: 1wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add - Añade el repositorio de VS Code: 1sudo add-apt-repository \u0026#34;deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\u0026#34; Instala Visual Studio Code: 1sudo apt update 2sudo apt install code Inicia VS Code: Puedes iniciar VS Code desde la terminal escribiendo code o encontrarlo en tu lista de aplicaciones instaladas. Escribe y ejecuta tu primer programa Una vez que hayas configurado tu entorno de programación, es hora de sumergirse en la codificación.\n¡Hola mundo! Este es posiblemente el programa más icónico para principiantes. Es simple, pero te introduce al proceso de escribir y ejecutar código.\n1print(\u0026#34;¡Hola mundo!\u0026#34;) Ejecución del programa Hola Mundo\nCálculo de área y perímetro de un triángulo Este programa es un poco más complejo. No solo imprime un mensaje, sino que también realiza cálculos matemáticos.\n1# Entrada del usuario 2lado1 = float(input(\u0026#34;Introduce la longitud del primer lado: \u0026#34;)) 3lado2 = float(input(\u0026#34;Introduce la longitud del segundo lado: \u0026#34;)) 4lado3 = float(input(\u0026#34;Introduce la longitud del tercer lado: \u0026#34;)) 5 6# Cálculo del perímetro 7perimetro = lado1 + lado2 + lado3 8 9# Cálculo del área usando la fórmula de Herón 10s = perimetro / 2 11area = (s*(s-lado1)*(s-lado2)*(s-lado3)) ** 0.5 12 13print(f\u0026#34;El perímetro del triángulo es: {perimetro}\u0026#34;) 14print(f\u0026#34;El área del triángulo es: {area:.2f}\u0026#34;) Ejecución del programa Triangulo\nConclusión Configurar un entorno de programación puede parecer desalentador al principio, pero con las herramientas y recursos adecuados, se convierte en una tarea manejable y gratificante. Esperamos que este artículo te haya proporcionado una base sólida para comenzar tu viaje en programación. ¡Feliz codificación!\nReferencias Lutz, M. (2013). Learning Python. O\u0026rsquo;Reilly Media.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMicrosoft. (2020). Visual Studio Code Documentation. Microsoft Docs.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":167832e4,"headings":[{"anchor":"conclusión","title":"Conclusión"},{"anchor":"cálculo-de-área-y-perímetro-de-un-triángulo","title":"Cálculo de área y perímetro de un triángulo"},{"anchor":"elegir-un-lenguaje-de-programación","title":"Elegir un lenguaje de programación"},{"anchor":"entornos-de-desarrollo-integrado-ides","title":"Entornos de Desarrollo Integrado (IDEs)"},{"anchor":"escribe-y-ejecuta-tu-primer-programa","title":"Escribe y ejecuta tu primer programa"},{"anchor":"hola-mundo","title":"¡Hola mundo!"},{"anchor":"instalación-de-python","title":"Instalación de Python"},{"anchor":"instalación-de-visual-studio-code","title":"Instalación de Visual Studio Code"},{"anchor":"para-usuarios-de-linux-ubuntudebian","title":"Para usuarios de Linux (Ubuntu/Debian):"},{"anchor":"para-usuarios-de-linux-ubuntudebian-1","title":"Para usuarios de Linux (Ubuntu/Debian):"},{"anchor":"para-usuarios-de-mac","title":"Para usuarios de Mac:"},{"anchor":"para-usuarios-de-mac-1","title":"Para usuarios de Mac:"},{"anchor":"para-usuarios-de-windows","title":"Para usuarios de Windows:"},{"anchor":"para-usuarios-de-windows-1","title":"Para usuarios de Windows:"},{"anchor":"referencias","title":"Referencias"}],"kind":"page","lang":"es","series":["Programming"],"summary":"Adentrarse en el mundo de la programación puede parecer una tarea titánica, especialmente cuando te encuentras frente a la decisión inicial: ¿por dónde empezar? Este artículo te guiará a través de los pasos esenciales para configurar tu entorno de programación, garantizando una base sólida para tu viaje codificador.","tags":["intro","programming","ide","python","install","tools"],"title":"Configura tu entorno de programación","url":"/es/programming/0100-intro/0104-setup-dev-environment/","year":"2023"},{"content":"","date":167832e4,"headings":[],"kind":"term","lang":"es","summary":"","title":"ide","url":"/es/tags/ide/","year":"2023"},{"content":"","date":167832e4,"headings":[],"kind":"term","lang":"es","summary":"","title":"install","url":"/es/tags/install/","year":"2023"},{"content":"","date":167832e4,"headings":[],"kind":"term","lang":"es","summary":"","title":"python","url":"/es/tags/python/","year":"2023"},{"content":"","date":167832e4,"headings":[],"kind":"term","lang":"es","summary":"","title":"tools","url":"/es/tags/tools/","year":"2023"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"2023","url":"/es/archives/2023/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Abril","url":"/es/archives/2023/04/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Agosto","url":"/es/archives/2023/08/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Archivo","url":"/es/archives/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Blog","url":"/es/blog/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Blog","url":"/es/posts/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"taxonomy","lang":"es","summary":"","title":"Categories","url":"/es/categories/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Ciclo de vida de Desarrollo de Software","url":"/es/software-engineering/0200-sdlc/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Conceptos básicos","url":"/es/programming/0200-basic-concepts/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Diciembre","url":"/es/archives/2023/12/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Enero","url":"/es/archives/2023/01/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Febrero","url":"/es/archives/2023/02/","year":"0001"},{"content":"Bienvenidos a esta serie exclusiva de artículos que componen un completo curso sobre Ingeniería de Software. Desde las raíces teóricas hasta las prácticas contemporáneas, este conjunto de escritos ha sido diseñado meticulosamente para brindar a los lectores una comprensión profunda y práctica de los diversos aspectos de la Ingeniería de Software.\nYa sea que seas un estudiante ansioso por adentrarte en los fundamentos, un profesional buscando refrescar conocimientos o simplemente alguien curioso por entender la magia detrás del desarrollo de software, esta colección te guiará paso a paso. A través de cada artículo, exploraremos conceptos clave, técnicas emergentes, herramientas esenciales y las mejores prácticas que definen nuestra industria hoy en día.\nTe invitamos a embarcarte en este viaje educativo. Cada artículo es una lección en sí mismo, diseñada para brindarte una experiencia de aprendizaje rica y aplicable en el mundo real. Prepárate para sumergirte en la apasionante disciplina de la Ingeniería de Software y descubrir las metodologías y herramientas que dan forma al mundo digital que nos rodea.\n","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"Bienvenidos a esta serie exclusiva de artículos que componen un completo curso sobre Ingeniería de Software. Desde las raíces teóricas hasta las prácticas contemporáneas, este conjunto de escritos ha sido diseñado meticulosamente para brindar a los lectores una comprensión profunda y práctica de los diversos aspectos de la Ingeniería de Software.\nYa sea que seas un estudiante ansioso por adentrarte en los fundamentos, un profesional buscando refrescar conocimientos o simplemente alguien curioso por entender la magia detrás del desarrollo de software, esta colección te guiará paso a paso.","title":"Ingeniería de Software","url":"/es/software-engineering/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Julio","url":"/es/archives/2023/07/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Junio","url":"/es/archives/2023/06/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"term","lang":"es","summary":"","title":"María Florencia Caro","url":"/es/authors/mfcaro/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Marzo","url":"/es/archives/2023/03/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Mayo","url":"/es/archives/2023/05/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Noviembre","url":"/es/archives/2023/11/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Octubre","url":"/es/archives/2023/10/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Patrones de diseño","url":"/es/programming/0500-design-patterns/","year":"0001"},{"content":"La Programación Orientada a Objetos (POO) es un paradigma de programación que utiliza objetos y clases para estructurar el código de manera que modele entidades del mundo real y sus relaciones. La POO permite a los programadores escribir código reutilizable, mantenible y organizado. En esta sección, exploraremos los conceptos fundamentales de la POO utilizando Python, aunque estos principios son aplicables en diversos lenguajes de programación.\n","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"La Programación Orientada a Objetos (POO) es un paradigma de programación que utiliza objetos y clases para estructurar el código de manera que modele entidades del mundo real y sus relaciones. La POO permite a los programadores escribir código reutilizable, mantenible y organizado. En esta sección, exploraremos los conceptos fundamentales de la POO utilizando Python, aunque estos principios son aplicables en diversos lenguajes de programación.","title":"Programación Orientada a Objetos","url":"/es/programming/0300-oop/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Pruebas de software","url":"/es/programming/0400-testing/","year":"0001"},{"content":"","date":-62135596800,"headings":[],"kind":"section","lang":"es","summary":"","title":"Septiembre","url":"/es/archives/2023/09/","year":"0001"}]