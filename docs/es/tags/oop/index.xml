<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oop on Learn-Software.com</title><link>/es/tags/oop/</link><description>Recent content in Oop on Learn-Software.com</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sun, 22 Sep 2024 01:42:17 +0100</lastBuildDate><atom:link href="/es/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Clases y Objetos</title><link>/es/programming/0300-oop/0301-classes-objects/</link><pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate><guid>/es/programming/0300-oop/0301-classes-objects/</guid><description>&lt;h2 id="anatomía-de-una-clase">Anatomía de una clase&lt;/h2>
&lt;p>Una clase actúa como un &lt;strong>plano o molde&lt;/strong> para construir objetos similares, definiendo sus características comunes y funcionalidades. Es similar al plano para construir casas de un mismo barrio: todas comparten ciertos atributos clave.&lt;/p>
&lt;p>Los componentes típicos de una clase son:&lt;/p>
&lt;p>&lt;strong>Atributos (propiedades)&lt;/strong>: Variables que caracterizan al objeto. Por ejemplo, para una clase &lt;code>Persona&lt;/code>, atributos como &lt;code>nombre&lt;/code>, &lt;code>edad&lt;/code>, &lt;code>DNI&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Persona&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dni &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nombre &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> edad &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Métodos&lt;/strong>: Funciones que definen comportamientos. Por ejemplo, una &lt;code>Persona&lt;/code> puede &lt;code>caminar()&lt;/code>, &lt;code>hablar()&lt;/code>, &lt;code>comer()&lt;/code>, etc. Acceden a los atributos para implementar dicha funcionalidad.&lt;/p></description></item><item><title>Encapsulamiento</title><link>/es/programming/0300-oop/0302-encapsulation/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>/es/programming/0300-oop/0302-encapsulation/</guid><description>&lt;p>Uno de los pilares fundamentales de la programación orientada a objetos es el encapsulamiento. Esta potente característica nos permite controlar el acceso a los miembros de una clase, ocultando los detalles de implementación y protegiendo el estado de nuestros objetos. En este artículo veremos en profundidad el concepto de encapsulamiento, la utilidad del uso de getters, setters, propiedades y métodos públicos/privados, y los importantes beneficios que esto nos brinda como desarrolladores.&lt;/p></description></item></channel></rss>