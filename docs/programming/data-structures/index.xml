<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structures on Learn-Software.com</title><link>/programming/data-structures/</link><description>Recent content in Data Structures on Learn-Software.com</description><generator>Hugo</generator><language>en</language><atom:link href="/programming/data-structures/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrays</title><link>/programming/data-structures/arrays/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/arrays/</guid><description>&lt;p>An array is a data structure that represents a set of elements, which are accessed through contiguous numeric indices ranging from 0 to the size of the array minus 1. Arrays provide fast, direct access to elements based on their position.&lt;/p>
&lt;p>In languages like Python and Ruby, arrays are known as &amp;rsquo;lists&amp;rsquo;. In Javascript they are known as &amp;lsquo;arrays&amp;rsquo;.&lt;/p>
&lt;p>Arrays are typically homogeneous, storing elements of the same type like integers, strings, etc. Some languages allow heterogeneous arrays with values of different types.&lt;/p></description></item><item><title>Maps (Dictionaries)</title><link>/programming/data-structures/maps/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/maps/</guid><description>&lt;p>A dictionary, or map, consists of a collection of key-value pairs. The key is used to access the associated value. Keys must be unique within a dictionary. Values can be repeated.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-map.jpg" alt="Diagram of a map">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Add/update:&lt;/strong> Inserts a key-value pair. If the key existed, its value is replaced.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Get value:&lt;/strong> Accesses the value given a key.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>value &lt;span style="color:#f92672">=&lt;/span> dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Delete:&lt;/strong> Removes a key-value pair from the dictionary.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">del&lt;/span> dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Traverse:&lt;/strong> Iterate over the keys, values or pairs of the dictionary.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> dictionary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(key, dictionary[key]) &lt;span style="color:#75715e"># key, value&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="creating-a-dictionary-or-map">Creating a dictionary or map&lt;/h2>
&lt;p>The syntax for creating maps or dictionaries in Python is:&lt;/p></description></item><item><title>Linked Lists</title><link>/programming/data-structures/linked-lists/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/linked-lists/</guid><description>&lt;p>A linked list is composed of &lt;code>nodes&lt;/code> where each node has two parts:&lt;/p>
&lt;ul>
&lt;li>Data or information&lt;/li>
&lt;li>Reference to the next node&lt;/li>
&lt;/ul>
&lt;p>Nodes are organized sequentially, each pointing to the next. The last node points to null to indicate the end.&lt;/p>
&lt;p>This dynamic structure allows efficient insertion and deletion of nodes.&lt;/p>
&lt;hr>
&lt;h2 id="types-of-linked-lists">Types of linked lists&lt;/h2>
&lt;p>There are several types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Singly linked:&lt;/strong> Each node points to the next one. Useful for queues and stacks.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-linked-list-single.jpg" alt="Diagram of a singly linked list">&lt;/p></description></item><item><title>Stacks</title><link>/programming/data-structures/stacks/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/stacks/</guid><description>&lt;p>The &lt;strong>LIFO&lt;/strong> nature of stacks is due to the fact that only the top element can be accessed and manipulated. The operation of placing an element on the stack is known as &lt;em>&amp;ldquo;push&amp;rdquo;&lt;/em>, while removing an element from the stack is a &lt;em>&amp;ldquo;pop&amp;rdquo;&lt;/em>. The LIFO operation causes the last element placed in a stack to be the first to be removed.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-stack.jpg" alt="Diagram of a stack">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The primary operations supported by a stack structure are:&lt;/p></description></item><item><title>Queues</title><link>/programming/data-structures/queues/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/queues/</guid><description>&lt;p>The FIFO (first in, first out) nature of queues is because only the initial element can be accessed and manipulated. When an element is added to the queue it is known as &lt;em>&amp;ldquo;enqueue&amp;rdquo;&lt;/em>, while removing an element is called &lt;em>&amp;ldquo;dequeue&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>This causes the first element to be added to the queue to also be the first to be removed, hence its FIFO behaviour.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-queue.jpg" alt="Diagram of a queue">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The basic queue operations are:&lt;/p></description></item></channel></rss>