<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The four pillars on Learn-Software.com</title><link>/programming/oop/the-four-pillars/</link><description>Recent content in The four pillars on Learn-Software.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 17 Mar 2025 09:03:24 +0000</lastBuildDate><atom:link href="/programming/oop/the-four-pillars/index.xml" rel="self" type="application/rss+xml"/><item><title>Encapsulation</title><link>/programming/oop/the-four-pillars/encapsulation/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/encapsulation/</guid><description>&lt;p>The importance of encapsulation lies in several key aspects:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Data protection&lt;/strong>: By controlling access to object data through methods, we can ensure that the data remains consistent and valid.&lt;/li>
&lt;li>&lt;strong>Modularity&lt;/strong>: Encapsulation allows objects to be self-contained, making it easier to understand and maintain code.&lt;/li>
&lt;li>&lt;strong>Flexibility&lt;/strong>: The internal implementation can be changed without affecting other parts of the code that use the object.&lt;/li>
&lt;li>&lt;strong>Reduced complexity&lt;/strong>: By hiding the details of internal workings, encapsulation reduces the complexity of the overall system from an external perspective.&lt;/li>
&lt;/ol>
&lt;h3 id="implementation-in-python">Implementation in Python&lt;/h3>
&lt;p>Python provides several mechanisms to implement encapsulation. Let&amp;rsquo;s explore these with examples:&lt;/p></description></item><item><title>Inheritance</title><link>/programming/oop/the-four-pillars/inheritance/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/inheritance/</guid><description>&lt;p>Key aspects of inheritance include:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Code reusability&lt;/strong>: Inheritance allows us to reuse code from existing classes, reducing redundancy and promoting efficient development.&lt;/li>
&lt;li>&lt;strong>Hierarchical classification&lt;/strong>: It enables the creation of class hierarchies, representing relationships and commonalities among objects.&lt;/li>
&lt;li>&lt;strong>Extensibility&lt;/strong>: New functionality can be added to existing classes without modifying them, following the open-closed principle.&lt;/li>
&lt;li>&lt;strong>Polymorphism&lt;/strong>: Inheritance is a prerequisite for runtime polymorphism (which we&amp;rsquo;ll discuss in detail later).&lt;/li>
&lt;/ol>
&lt;h3 id="types-of-inheritance">Types of inheritance&lt;/h3>
&lt;p>There are several types of inheritance, though not all programming languages support all types. The main types are:&lt;/p></description></item><item><title>Polymorphism</title><link>/programming/oop/the-four-pillars/polymorphism/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/polymorphism/</guid><description>&lt;p>Polymorphism enables writing flexible and reusable code by allowing us to work with objects at a more abstract level, without needing to know their specific types.&lt;/p>
&lt;p>There are two main types of polymorphism in object-oriented programming:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Compile-time polymorphism (Static polymorphism)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Achieved through method &lt;em>overloading&lt;/em>.&lt;/li>
&lt;li>Resolved at compile time.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Runtime polymorphism (Dynamic polymorphism)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Achieved through method &lt;em>overriding&lt;/em>.&lt;/li>
&lt;li>Resolved at runtime.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Python primarily supports runtime polymorphism, as it is a dynamically typed language. However, we can demonstrate concepts similar to compile-time polymorphism as well.&lt;/p></description></item><item><title>Abstraction</title><link>/programming/oop/the-four-pillars/abstraction/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/abstraction/</guid><description>&lt;p>Key aspects of abstraction include:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Simplification&lt;/strong>: Abstraction reduces complexity by hiding unnecessary details.&lt;/li>
&lt;li>&lt;strong>Focusing on essential features&lt;/strong>: It emphasises what an object does rather than how it does it.&lt;/li>
&lt;li>&lt;strong>Separation of concerns&lt;/strong>: It allows separating the interface of a class from its implementation.&lt;/li>
&lt;li>&lt;strong>Modularity&lt;/strong>: Abstraction promotes modular design by defining clear boundaries between components.&lt;/li>
&lt;/ol>
&lt;h3 id="abstract-classes-and-interfaces">Abstract classes and interfaces&lt;/h3>
&lt;p>In many object-oriented languages, abstraction is implemented through abstract classes and interfaces. While Python doesn&amp;rsquo;t have a built-in interface concept, we can achieve similar functionality using abstract base classes. Python&amp;rsquo;s &lt;code>abc&lt;/code> module provides infrastructure for defining abstract base classes:&lt;/p></description></item><item><title>Conclusion</title><link>/programming/oop/the-four-pillars/conclusion/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/conclusion/</guid><description>&lt;ul>
&lt;li>&lt;strong>Encapsulation&lt;/strong> allows us to bundle data and methods together, hiding internal details and protecting data integrity.&lt;/li>
&lt;li>&lt;strong>Inheritance&lt;/strong> enables code reuse and the creation of hierarchical relationships between classes.&lt;/li>
&lt;li>&lt;strong>Polymorphism&lt;/strong> provides a way to use objects of different types through a common interface, enhancing flexibility and extensibility.&lt;/li>
&lt;li>&lt;strong>Abstraction&lt;/strong> allows us to create simplified models of complex systems, focusing on essential features and hiding unnecessary details.&lt;/li>
&lt;/ul>
&lt;p>As you continue your journey in software development, you&amp;rsquo;ll find that mastering these concepts opens up new ways of thinking about and solving problems. Remember that OOP is not just about syntax or language features - it&amp;rsquo;s a mindset for modeling complex systems and managing complexity in software.&lt;/p></description></item></channel></rss>