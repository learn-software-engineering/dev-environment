[{"date":1693612800,"headings":[],"kind":"taxonomy","lang":"en","summary":"","title":"Authors","url":"/en/authors/","year":"2023"},{"date":1693612800,"headings":[],"kind":"section","lang":"en","summary":"","title":"Blog","url":"/en/blog/","year":"2023"},{"date":1693612800,"headings":[],"kind":"term","lang":"en","summary":"","title":"cd","url":"/en/tags/cd/","year":"2023"},{"authors":["Julián Nonino"],"date":1693612800,"headings":[{"anchor":"benefits-of-continuous-delivery","title":"Benefits of Continuous Delivery"},{"anchor":"challenges-in-adopting-continuous-delivery","title":"Challenges in adopting Continuous Delivery"},{"anchor":"continuous-deployment","title":"Continuous Deployment"},{"anchor":"core-principles-and-practices","title":"Core principles and practices"},{"anchor":"references","title":"References"},{"anchor":"the-delivery-process","title":"The delivery process"}],"kind":"page","lang":"en","summary":"Here you can find information about Continuous Delivery, what is it, which benefits can you expect from it, the challenges you might face trying to adopted and so on.","tags":["cd","continuous-delivery","continuous-deployment"],"title":"Continuous Delivery","url":"/en/blog/2023/09/continuous-delivery/","year":"2023"},{"date":1693612800,"headings":[],"kind":"term","lang":"en","summary":"","title":"continuous-delivery","url":"/en/tags/continuous-delivery/","year":"2023"},{"date":1693612800,"headings":[],"kind":"term","lang":"en","summary":"","title":"continuous-deployment","url":"/en/tags/continuous-deployment/","year":"2023"},{"date":1693612800,"headings":[],"kind":"term","lang":"en","summary":"I’m a computer engineer who has been thriving in the software industry since 2013. My entire career has been driven by an insatiable curiosity for software engineering practices and a relentless pursuit of ways to refine the development process. My journey has seen me wear many hats, including those of a Software Developer, Configuration Manager, Scrum Master, DevOps Engineer, DevOps Consultant, and Platform Engineer.\nWhat truly fuels my passion is not just the act of learning, but also the joy of sharing knowledge.","title":"Julián Nonino","url":"/en/authors/jnonino/","year":"2023"},{"date":1693612800,"headings":[],"kind":"taxonomy","lang":"en","summary":"","title":"Tags","url":"/en/tags/","year":"2023"},{"date":1692403200,"headings":[],"kind":"term","lang":"en","summary":"","title":"ci","url":"/en/tags/ci/","year":"2023"},{"authors":["Julián Nonino"],"date":1692403200,"headings":[{"anchor":"benefits","title":"Benefits"},{"anchor":"challenges","title":"Challenges"},{"anchor":"core-principles-and-practices","title":"Core principles and practices"},{"anchor":"elements-of-a-ci-system","title":"Elements of a CI system"},{"anchor":"references","title":"References"},{"anchor":"the-integration-process","title":"The integration process"}],"kind":"page","lang":"en","summary":"What is Continuous Integration? Which benefits it provides? In this article you can find answers to those questions and many more.","tags":["ci","continuous-integration"],"title":"Continuous Integration","url":"/en/blog/2023/08/continuous-integration/","year":"2023"},{"date":1692403200,"headings":[],"kind":"term","lang":"en","summary":"","title":"continuous-integration","url":"/en/tags/continuous-integration/","year":"2023"},{"date":1692316800,"headings":[],"kind":"term","lang":"en","summary":"","title":"requirements","url":"/en/tags/requirements/","year":"2023"},{"authors":["Julián Nonino"],"date":1692316800,"headings":[{"anchor":"business-requirements","title":"Business requirements"},{"anchor":"challenges","title":"Challenges"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"eliciting-and-analyzing-requirements","title":"Eliciting and analyzing requirements"},{"anchor":"emerging-trends","title":"Emerging Trends"},{"anchor":"external-requirements","title":"External Requirements"},{"anchor":"functional-requirements","title":"Functional requirements"},{"anchor":"levels-of-requirements","title":"Levels of requirements"},{"anchor":"non-functional-requirements","title":"Non-functional requirements"},{"anchor":"notations-for-documenting-requirements","title":"Notations for documenting requirements"},{"anchor":"organizational-requirements","title":"Organizational Requirements"},{"anchor":"product-requirements","title":"Product Requirements"},{"anchor":"properties-of-good-requirements","title":"Properties of good requirements"},{"anchor":"references","title":"References"},{"anchor":"software-requirements-specification-srs","title":"Software Requirements Specification (SRS)"},{"anchor":"system-requirements","title":"System requirements"},{"anchor":"types-of-requirements","title":"Types of requirements"},{"anchor":"user-requirements","title":"User requirements"},{"anchor":"what-should-requirements-define","title":"What should requirements define?"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"Requirements engineering is the process of defining, documenting and maintaining requirements for a software system. It is the first and foundational stage in the software development lifecycle. Requirements express the needs and constraints that the software must satisfy in order to solve problems and provide value to users and the business. Let's get started understanding the basics of requirements in software projects.","tags":["software-engineering","requirements","srs"],"title":"Requirements Engineering","url":"/en/software-engineering/0300-requirements-engineering/01-requirements-engineering/","year":"2023"},{"date":1692316800,"headings":[],"kind":"taxonomy","lang":"en","summary":"","title":"Series","url":"/en/series/","year":"2023"},{"date":1692316800,"headings":[],"kind":"term","lang":"en","summary":"","title":"Software Engineering","url":"/en/series/software-engineering/","year":"2023"},{"date":1692316800,"headings":[],"kind":"section","lang":"en","summary":"Welcome to this exclusive series of articles that make up a comprehensive course on Software Engineering. From theoretical roots to contemporary practices, this collection has been meticulously crafted to provide readers with a deep and practical understanding of the various facets of Software Engineering.\nWhether you’re a student eager to dive into the fundamentals, a professional looking to refresh your knowledge, or simply someone curious about the magic behind software development, this collection will guide you step by step.","title":"Software Engineering","url":"/en/software-engineering/","year":"2023"},{"date":1692316800,"headings":[],"kind":"term","lang":"en","summary":"","title":"software-engineering","url":"/en/tags/software-engineering/","year":"2023"},{"date":1692316800,"headings":[],"kind":"term","lang":"en","summary":"","title":"srs","url":"/en/tags/srs/","year":"2023"},{"date":1692144e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"deployment","url":"/en/tags/deployment/","year":"2023"},{"date":1692144e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"intro","url":"/en/tags/intro/","year":"2023"},{"date":1692144e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"maintenance","url":"/en/tags/maintenance/","year":"2023"},{"date":1692144e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"sdlc","url":"/en/tags/sdlc/","year":"2023"},{"date":1692144e3,"headings":[],"kind":"section","lang":"en","summary":"","title":"Software Development Life Cycle (SDLC)","url":"/en/software-engineering/0200-sdlc/","year":"2023"},{"authors":["Julián Nonino"],"date":1692144e3,"headings":[{"anchor":"best-practices","title":"Best practices"},{"anchor":"challenges","title":"Challenges"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"deployment-methods","title":"Deployment methods"},{"anchor":"key-steps-in-the-deployment-process","title":"Key steps in the deployment process"},{"anchor":"references","title":"References"},{"anchor":"tools-for-deployment-automation","title":"Tools for deployment automation"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"The deployment stage involves releasing the software into production and making it available for end users.","tags":["intro","software-engineering","sdlc","deployment"],"title":"The Deployment phase","url":"/en/software-engineering/0200-sdlc/06-deployment/","year":"2023"},{"authors":["Julián Nonino"],"date":1692144e3,"headings":[{"anchor":"challenges","title":"Challenges"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"references","title":"References"},{"anchor":"the-economic-aspects","title":"The economic aspects"},{"anchor":"the-process-of-maintenance","title":"The Process of maintenance"},{"anchor":"types-of-software-maintenance","title":"Types of software maintenance"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"Once a software application is deployed and begins its life in the hands of users, its journey is far from over. The maintenance stage, often overlooked by novices, plays a pivotal role in the Software Development Life Cycle (SDLC).","tags":["intro","software-engineering","sdlc","maintenance"],"title":"The Maintenance phase","url":"/en/software-engineering/0200-sdlc/07-maintenance/","year":"2023"},{"date":1692057600,"headings":[],"kind":"term","lang":"en","summary":"","title":"testing","url":"/en/tags/testing/","year":"2023"},{"authors":["Julián Nonino"],"date":1692057600,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"key-components","title":"Key components"},{"anchor":"levels-of-testing","title":"Levels of Testing"},{"anchor":"references","title":"References"},{"anchor":"testing-types","title":"Testing types"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"In the rapidly-evolving domain of software development, delivering a product isn't the endpoint, it's a milestone. However, before that milestone can be reached, a rigorous evaluation must ensure the software is robust, user-friendly, and aligns with specified requirements. The torchbearer of this assessment? The testing stage of the Software Development Life Cycle (SDLC). Dive with me into this crucial phase and fathom its depth and expanse.","tags":["intro","software-engineering","sdlc","testing"],"title":"The Testing phase","url":"/en/software-engineering/0200-sdlc/05-testing/","year":"2023"},{"date":1691971200,"headings":[],"kind":"term","lang":"en","summary":"","title":"coding","url":"/en/tags/coding/","year":"2023"},{"date":1691971200,"headings":[],"kind":"term","lang":"en","summary":"","title":"implementation","url":"/en/tags/implementation/","year":"2023"},{"date":1691971200,"headings":[],"kind":"term","lang":"en","summary":"","title":"programming","url":"/en/tags/programming/","year":"2023"},{"authors":["Julián Nonino"],"date":1691971200,"headings":[{"anchor":"challenges-and-solutions","title":"Challenges and solutions"},{"anchor":"choosing-the-right-programming-language","title":"Choosing the right programming language"},{"anchor":"coding-standards-and-best-practices","title":"Coding standards and best practices"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"continuous-integration-ci-and-continuous-deployment-cd","title":"Continuous Integration (CI) and Continuous Deployment (CD)"},{"anchor":"importance-of-testing-in-the-implementation-stage","title":"Importance of testing in the implementation stage"},{"anchor":"key-components","title":"Key components"},{"anchor":"references","title":"References"},{"anchor":"version-control","title":"Version control"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"The Software Development Life Cycle (SDLC) guides software engineers through the steps of creating quality software. In the implementation stage, abstract designs materialize into tangible lines of code, giving birth to the software's functional attributes.","tags":["intro","software-engineering","sdlc","implementation","coding","programming"],"title":"The Implementation phase","url":"/en/software-engineering/0200-sdlc/04-implementation/","year":"2023"},{"date":1691884800,"headings":[],"kind":"term","lang":"en","summary":"","title":"design","url":"/en/tags/design/","year":"2023"},{"authors":["Julián Nonino"],"date":1691884800,"headings":[{"anchor":"architecture-design","title":"Architecture design"},{"anchor":"components","title":"Components"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"data-design","title":"Data design"},{"anchor":"interface-design","title":"Interface design"},{"anchor":"procedural-design","title":"Procedural design"},{"anchor":"references","title":"References"},{"anchor":"tools-and-techniques","title":"Tools and techniques"},{"anchor":"why-it-is-important","title":"Why it is important"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"System design is an essential part of the Software Development Life Cycle (SDLC). In many ways, this phase sets the stage for the eventual construction of the software system.","tags":["intro","software-engineering","sdlc","design"],"title":"The System Design phase","url":"/en/software-engineering/0200-sdlc/03-system-design/","year":"2023"},{"date":1691798400,"headings":[],"kind":"term","lang":"en","summary":"","title":"planning","url":"/en/tags/planning/","year":"2023"},{"authors":["Julián Nonino"],"date":1691798400,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"feasibility-study","title":"Feasibility study"},{"anchor":"key-components","title":"Key components"},{"anchor":"project-scheduling","title":"Project scheduling"},{"anchor":"references","title":"References"},{"anchor":"requirement-gathering-and-analysis","title":"Requirement gathering and analysis"},{"anchor":"resource-allocation","title":"Resource allocation"},{"anchor":"risk-assessment","title":"Risk assessment"},{"anchor":"why-planning-matters","title":"Why planning matters"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"Stepping into the vast world of software development, one quickly realizes that building successful software isn't just about writing code. It requires foresight, strategy, and, above all, meticulous planning. The planning phase of the SDLC serves as the foundation upon which all subsequent stages are built. Here, we'll unpack this critical phase, understanding its nuances and appreciating its central role in software engineering.","tags":["intro","software-engineering","sdlc","planning"],"title":"The Planning phase","url":"/en/software-engineering/0200-sdlc/02-planning/","year":"2023"},{"authors":["Julián Nonino"],"date":1691712e3,"headings":[{"anchor":"phases","title":"Phases"},{"anchor":"references","title":"References"},{"anchor":"why-it-is-important","title":"Why it is important?"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"In the realm of software and technology, a predictable and structured approach to software development is pivotal. The Software Development Life Cycle (SDLC) offers just that. As we delve into the SDLC, you'll understand its integral role in the world of software engineering and how it manifests in various development methodologies.","tags":["intro","software-engineering","sdlc"],"title":"Introduction","url":"/en/software-engineering/0200-sdlc/01-introduction/","year":"2023"},{"authors":["Julián Nonino"],"date":1691625600,"headings":[{"anchor":"references","title":"References"},{"anchor":"what-is-software","title":"What is Software?"},{"anchor":"what-is-software-engineering","title":"What is Software Engineering?"},{"anchor":"why-it-is-important-to-develop-quality-software","title":"Why it is important to develop quality software"}],"kind":"page","lang":"en","series":["Software Engineering"],"summary":"In today's digital age, it's impossible to imagine a world without software. From the apps we use daily to sophisticated systems that run entire cities, software is an intricate part of our lives. If you're at the beginning of your journey into the world of software, this article will provide a foundational understanding of what software is, what software engineering entails, and the paramount significance of both in today's world.","tags":["intro","software-engineering"],"title":"Introduction","url":"/en/software-engineering/0100-intro/01-intro/","year":"2023"},{"date":1691452800,"headings":[],"kind":"term","lang":"en","summary":"","title":"factorial","url":"/en/tags/factorial/","year":"2023"},{"date":1691452800,"headings":[],"kind":"term","lang":"en","summary":"","title":"fibonacci\"","url":"/en/tags/fibonacci/","year":"2023"},{"date":1691452800,"headings":[],"kind":"term","lang":"en","summary":"","title":"python","url":"/en/tags/python/","year":"2023"},{"date":1691452800,"headings":[],"kind":"term","lang":"en","summary":"","title":"recursion","url":"/en/tags/recursion/","year":"2023"},{"authors":["Julián Nonino"],"date":1691452800,"headings":[{"anchor":"advantages-and-disadvantages","title":"Advantages and disadvantages"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"tail-recursion","title":"Tail Recursion"}],"kind":"page","lang":"en","summary":"A recursive function is a function that calls itself in order to solve a problem. This self-referential nature can lead to elegant and concise solutions, but it also requires careful design to prevent infinite loops and stack overflows. In this article, we'll explore the concept of recursion, learn how to write recursive functions in Python, and discuss their pros and cons.","tags":["recursion","factorial","fibonacci\"","python"],"title":"Recursive functions","url":"/en/blog/2023/08/recursive-functions/","year":"2023"},{"authors":["Julián Nonino"],"date":1681603200,"headings":[{"anchor":"a-multithreading","title":"a. Multithreading"},{"anchor":"b-genericstemplates","title":"b. Generics/Templates"},{"anchor":"c-reflection","title":"c. Reflection"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"d-serialization-and-deserialization","title":"d. Serialization and deserialization"},{"anchor":"e-dependency-injection","title":"e. Dependency injection"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Object-Oriented Programming (OOP) has many advanced concepts that take the programming paradigm to a higher level. These concepts enable developers to write code that is more efficient, flexible, and maintainable. In this article, we will delve into some of these advanced concepts, including multithreading, generics/templates, reflection, serialization and deserialization, and dependency injection. Though we’ll provide Python examples where applicable, it’s worth noting that some of these concepts might be more prevalent in other programming languages.","tags":["oop","object-oriented","multithreading","generics","templates","reflections","serialization"],"title":"Advanced concepts","url":"/en/programming/0300-oop/08-advanced-concepts/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"generics","url":"/en/tags/generics/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"multithreading","url":"/en/tags/multithreading/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"object-oriented","url":"/en/tags/object-oriented/","year":"2023"},{"date":1681603200,"headings":[],"kind":"section","lang":"en","summary":"Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure code in a way that models real-world entities and their relationships. OOP enables programmers to write reusable, maintainable, and organized code. In this section, we’ll explore the core concepts of OOP using Python, though these principles are applicable across various programming languages.","title":"Object-Oriented Programming","url":"/en/programming/0300-oop/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"oop","url":"/en/tags/oop/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"Programming","url":"/en/series/programming/","year":"2023"},{"date":1681603200,"headings":[],"kind":"section","lang":"en","summary":"Welcome to our comprehensive series on beginning your journey with programming. Crafted for those new to the coding world, this collection of articles offers a step-by-step approach to understanding the fundamentals of programming. Starting from the basics, like understanding variables, data types, and control structures, to gradually exploring more complex topics such as algorithms, data structures, and software design principles, this series is designed to be your guide into the exciting world of code.","title":"Programming","url":"/en/programming/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"reflections","url":"/en/tags/reflections/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"serialization","url":"/en/tags/serialization/","year":"2023"},{"date":1681603200,"headings":[],"kind":"term","lang":"en","summary":"","title":"templates","url":"/en/tags/templates/","year":"2023"},{"date":1681430400,"headings":[],"kind":"term","lang":"en","summary":"","title":"aggregation","url":"/en/tags/aggregation/","year":"2023"},{"date":1681430400,"headings":[],"kind":"term","lang":"en","summary":"","title":"associations","url":"/en/tags/associations/","year":"2023"},{"authors":["Julián Nonino"],"date":1681430400,"headings":[{"anchor":"aggregation","title":"Aggregation"},{"anchor":"aggregation-1","title":"Aggregation"},{"anchor":"association","title":"Association"},{"anchor":"association-1","title":"Association"},{"anchor":"composition","title":"Composition"},{"anchor":"composition-1","title":"Composition"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"definitions","title":"Definitions"},{"anchor":"has-a-relationship","title":"\u0026ldquo;has-a\u0026rdquo; relationship"},{"anchor":"real-world-examples-and-python-code","title":"Real-world Examples and Python Code"},{"anchor":"uml-diagrams","title":"UML Diagrams"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Understanding relationships between classes is vital for designing robust and maintainable systems. This article, will explore three types of relationships: Associations, Aggregations, and Compositions. We’ll look into their definitions, differences, and applications, providing examples in Python and using UML diagrams.\nDefinitions Association An association represents a “using” relationship between two or more objects. It indicates that objects of one class are somehow connected or utilize objects of another class.\nAggregation Aggregation is a specialized form of association where one class is a part of another class but both exist independently.","tags":["oop","object-oriented","associations","aggregation","composition","uml"],"title":"Associations, aggregations, and compositions","url":"/en/programming/0300-oop/07-associations/","year":"2023"},{"date":1681430400,"headings":[],"kind":"term","lang":"en","summary":"","title":"composition","url":"/en/tags/composition/","year":"2023"},{"date":1681430400,"headings":[],"kind":"term","lang":"en","summary":"","title":"uml","url":"/en/tags/uml/","year":"2023"},{"authors":["Julián Nonino"],"date":1681257600,"headings":[{"anchor":"abstract-classes-and-interfaces","title":"Abstract classes and interfaces"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"implementing-abstraction-in-java","title":"Implementing abstraction in Java"},{"anchor":"implementing-abstraction-in-python","title":"Implementing abstraction in Python"},{"anchor":"using-abstract-classes","title":"Using abstract classes"},{"anchor":"using-interfaces","title":"Using interfaces"},{"anchor":"when-to-use-abstract-classes-and-interfaces-in-java","title":"When to use abstract classes and interfaces in Java"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Abstraction is one of the key principles in Object-Oriented Programming (OOP). It plays a vital role in managing complexity by hiding unnecessary details and exposing only what’s essential. This article, will explore the concept of abstraction, its purpose, abstract classes, interfaces, and implementation in Python.\nAbstraction refers to the practice of hiding the complex reality while exposing only the essential parts. It’s like viewing something at a high level without delving into the details.","tags":["oop","object-oriented","abstractions","interfaces"],"title":"Abstraction","url":"/en/programming/0300-oop/06-abstraction/","year":"2023"},{"date":1681257600,"headings":[],"kind":"term","lang":"en","summary":"","title":"abstractions","url":"/en/tags/abstractions/","year":"2023"},{"date":1681257600,"headings":[],"kind":"term","lang":"en","summary":"","title":"interfaces","url":"/en/tags/interfaces/","year":"2023"},{"date":1681084800,"headings":[],"kind":"term","lang":"en","summary":"","title":"polymorphism","url":"/en/tags/polymorphism/","year":"2023"},{"authors":["Julián Nonino"],"date":1681084800,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"example","title":"Example"},{"anchor":"method-overloading","title":"Method overloading"},{"anchor":"method-overriding","title":"Method overriding"},{"anchor":"virtual-functions","title":"Virtual functions"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Polymorphism is a Greek word that means “many-shaped.” In Object-Oriented Programming (OOP), it’s a principle that allows objects of different classes to be treated as objects of a common base class. This principle enables greater flexibility and more dynamic behavior in code. This article, will delve into the concept of polymorphism, discussing its types, overloading, overriding, virtual functions, and providing examples in Python.\nPolymorphism allows different objects to respond to the same method call in a way that’s specific to their individual types.","tags":["oop","object-oriented","polymorphism"],"title":"Polymorphism","url":"/en/programming/0300-oop/05-polymorphism/","year":"2023"},{"date":1680912e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"inheritance","url":"/en/tags/inheritance/","year":"2023"},{"authors":["Julián Nonino"],"date":1680912e3,"headings":[{"anchor":"base-and-derived-classes","title":"Base and derived classes"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"example","title":"Example"},{"anchor":"is-a-relationship","title":"\u0026ldquo;is-a\u0026rdquo; relationship"},{"anchor":"overriding-methods","title":"Overriding methods"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Inheritance is another fundamental concept in Object-Oriented Programming (OOP), allowing for the creation of a new class based on an existing class. This concept helps in reusing code, creating relationships between classes, and building hierarchical structures. This article will explore inheritance in detail, focusing on examples in Python.\nInheritance is a mechanism that allows a class (derived or subclass) to inherit attributes and methods from another class (base or superclass). The derived class can extend or modify the features of the base class.","tags":["oop","object-oriented","inheritance"],"title":"Inheritance","url":"/en/programming/0300-oop/04-inheritance/","year":"2023"},{"date":1680739200,"headings":[],"kind":"term","lang":"en","summary":"","title":"encapsulation","url":"/en/tags/encapsulation/","year":"2023"},{"authors":["Julián Nonino"],"date":1680739200,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"example","title":"Example"},{"anchor":"getters-and-setters","title":"Getters and setters"},{"anchor":"public-private-and-protected-modifiers","title":"Public, Private, and Protected modifiers"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Encapsulation is one of the four foundational principles of Object-Oriented Programming (OOP). It plays a crucial role in protecting the integrity of an object by controlling how its data can be accessed and modified. This article, will explore the concept of encapsulation, explain modifiers, and demonstrate how to use getters and setters in Python.\nEncapsulation refers to the bundling of data (attributes) and the methods (functions) that operate on the data into a single unit, restricting direct access to some of an object’s components.","tags":["oop","object-oriented","encapsulation"],"title":"Encapsulation","url":"/en/programming/0300-oop/03-encapsulation/","year":"2023"},{"date":1680566400,"headings":[],"kind":"term","lang":"en","summary":"","title":"classes","url":"/en/tags/classes/","year":"2023"},{"authors":["Julián Nonino"],"date":1680566400,"headings":[{"anchor":"classes","title":"Classes"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"constructor","title":"Constructor"},{"anchor":"creating-and-instantiating-classes","title":"Creating and instantiating classes"},{"anchor":"creating-and-using-a-class","title":"Creating and using a class"},{"anchor":"definitions","title":"Definitions"},{"anchor":"deleting-an-object","title":"Deleting an object"},{"anchor":"destructor","title":"Destructor"},{"anchor":"examples","title":"Examples"},{"anchor":"instantiating-a-class","title":"Instantiating a class"},{"anchor":"objects","title":"Objects"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Building on our previous introduction to Object-Oriented Programming (OOP), this post will dive deeper into the core concepts of classes and objects. We’ll explore their definitions, how to create and use them, and discuss constructors and destructors, with examples in Python.\nDefinitions Classes A class is a blueprint that defines the structure and behavior of an object. It encapsulates data (attributes) and functions (methods) that operate on the data.\n1class Dog: 2 def bark(self): 3 print(\"Woof!","tags":["oop","object-oriented","classes","objects"],"title":"Classes and objects","url":"/en/programming/0300-oop/02-classes-objects/","year":"2023"},{"date":1680566400,"headings":[],"kind":"term","lang":"en","summary":"","title":"objects","url":"/en/tags/objects/","year":"2023"},{"authors":["Julián Nonino"],"date":1680393600,"headings":[{"anchor":"advantages","title":"Advantages"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"example","title":"Example"},{"anchor":"oop-vs-procedural-programming","title":"OOP vs. Procedural Programming"},{"anchor":"principles","title":"Principles"},{"anchor":"real-world-analogy","title":"Real-World analogy"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Object-Oriented Programming (OOP) is a paradigm that helps organize code using real-world concepts, making it more readable, reusable, and maintainable. It’s built around the idea that everything can be represented as objects.\nOOP emerged in the 1960s with the programming language Simula, but it gained prominence in the 1980s with languages like C++ and Smalltalk. At its core, OOP models the code as “objects” that bundle both state (attributes) and behaviors (methods).","tags":["intro","oop","object-oriented","oop-principles"],"title":"Introduction","url":"/en/programming/0300-oop/01-intro/","year":"2023"},{"date":1680393600,"headings":[],"kind":"term","lang":"en","summary":"","title":"oop-principles","url":"/en/tags/oop-principles/","year":"2023"},{"date":1679875200,"headings":[],"kind":"term","lang":"en","summary":"","title":"adapter","url":"/en/tags/adapter/","year":"2023"},{"date":1679875200,"headings":[],"kind":"section","lang":"en","summary":"","title":"Design patterns","url":"/en/programming/0500-design-patterns/","year":"2023"},{"date":1679875200,"headings":[],"kind":"term","lang":"en","summary":"","title":"design-patters","url":"/en/tags/design-patters/","year":"2023"},{"authors":["Julián Nonino"],"date":1679875200,"headings":[{"anchor":"adapter-pattern","title":"Adapter pattern"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"examples-of-design-patterns","title":"Examples of design patterns"},{"anchor":"observer-pattern","title":"Observer pattern"},{"anchor":"singleton-pattern","title":"Singleton pattern"},{"anchor":"types-of-design-patterns","title":"Types of design patterns"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Design patterns are tried-and-true solutions to common problems that arise in software development. They represent best practices and are used to create organized, clean, and scalable code. This article covers various design patterns with examples in Python.","tags":["intro","programming","design-patters","singleton","adapter","observer"],"title":"Introduction","url":"/en/programming/0500-design-patterns/01-introduction/","year":"2023"},{"date":1679875200,"headings":[],"kind":"term","lang":"en","summary":"","title":"observer","url":"/en/tags/observer/","year":"2023"},{"date":1679875200,"headings":[],"kind":"term","lang":"en","summary":"","title":"singleton","url":"/en/tags/singleton/","year":"2023"},{"date":1679702400,"headings":[],"kind":"section","lang":"en","summary":"","title":"Software testing","url":"/en/programming/0400-testing/","year":"2023"},{"date":1679702400,"headings":[],"kind":"term","lang":"en","summary":"","title":"tdd","url":"/en/tags/tdd/","year":"2023"},{"authors":["Julián Nonino"],"date":1679702400,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"functional-testing","title":"Functional testing"},{"anchor":"integration-testing","title":"Integration testing"},{"anchor":"test-driven-development-tdd","title":"Test-Driven Development (TDD)"},{"anchor":"types-of-testing","title":"Types of testing"},{"anchor":"unit-testing","title":"Unit testing"},{"anchor":"why-testing-matters","title":"Why testing matters?"},{"anchor":"writing-tests-in-python","title":"Writing tests in Python"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Testing is the practice of running code to check if it behaves as expected. It helps find errors, ensures reliability, and maintains code quality. This article provides an introduction to testing, focusing on examples in Python but also describing general principles applicable to other programming languages.","tags":["intro","programming","testing","tdd"],"title":"Testing","url":"/en/programming/0400-testing/02-testing/","year":"2023"},{"date":1679529600,"headings":[],"kind":"term","lang":"en","summary":"","title":"debug","url":"/en/tags/debug/","year":"2023"},{"date":1679529600,"headings":[],"kind":"term","lang":"en","summary":"","title":"error","url":"/en/tags/error/","year":"2023"},{"authors":["Julián Nonino"],"date":1679529600,"headings":[{"anchor":"common-python-errors","title":"Common Python errors"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"debugging-techniques","title":"Debugging techniques"},{"anchor":"error-handling","title":"Error handling"},{"anchor":"the-finally-block","title":"The Finally block"},{"anchor":"the-try-except-block","title":"The Try-Except block"},{"anchor":"understanding-errors","title":"Understanding errors"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Error handling and debugging are essential skills for any programmer. They help ensure that your code runs smoothly and allow you to identify and fix issues when they arise. This article will cover the fundamental concepts of error handling and debugging, with examples in Python.","tags":["intro","programming","error","try-catch","try-excerpt","debug"],"title":"Error Handling and Debugging","url":"/en/programming/0400-testing/01-error-handling-debugging/","year":"2023"},{"date":1679529600,"headings":[],"kind":"term","lang":"en","summary":"","title":"try-catch","url":"/en/tags/try-catch/","year":"2023"},{"date":1679529600,"headings":[],"kind":"term","lang":"en","summary":"","title":"try-excerpt","url":"/en/tags/try-excerpt/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"algorithms","url":"/en/tags/algorithms/","year":"2023"},{"authors":["Julián Nonino"],"date":1679184e3,"headings":[{"anchor":"algorithm-complexity","title":"Algorithm complexity"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"search-algorithms","title":"Search algorithms"},{"anchor":"sorting-algorithms","title":"Sorting algorithms"},{"anchor":"space-complexity","title":"Space complexity"},{"anchor":"time-complexity","title":"Time complexity"},{"anchor":"types-of-algorithms","title":"Types of algorithms"},{"anchor":"what-is-an-algorithm","title":"What is an algorithm?"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Algorithms are a set of step-by-step procedures or rules performed in a specific order to achieve a particular goal or solve a specific problem. In programming, algorithms form the backbone of effective problem-solving and efficient code execution. In this article, we will explore different aspects of algorithms, using examples in Python, while keeping the explanations as generic as possible.","tags":["intro","programming","algorithms","sort","bubble-sort","search","binary-search"],"title":"Algorithms","url":"/en/programming/0200-basic-concepts/04-algorithms/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"section","lang":"en","summary":"","title":"Basic concepts","url":"/en/programming/0200-basic-concepts/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"binary-search","url":"/en/tags/binary-search/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"bubble-sort","url":"/en/tags/bubble-sort/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"search","url":"/en/tags/search/","year":"2023"},{"date":1679184e3,"headings":[],"kind":"term","lang":"en","summary":"","title":"sort","url":"/en/tags/sort/","year":"2023"},{"date":1679011200,"headings":[],"kind":"term","lang":"en","summary":"","title":"functions","url":"/en/tags/functions/","year":"2023"},{"authors":["Julián Nonino"],"date":1679011200,"headings":[{"anchor":"args","title":"*args"},{"anchor":"arguments","title":"Arguments"},{"anchor":"calling-a-function","title":"Calling a function"},{"anchor":"combining-args-and-kwargs","title":"Combining *args and **kwargs"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"function-declaration","title":"Function declaration"},{"anchor":"kwargs","title":"**kwargs"},{"anchor":"parameters","title":"Parameters"},{"anchor":"parameters-and-arguments","title":"Parameters and arguments"},{"anchor":"recursive-functions","title":"Recursive functions"},{"anchor":"return-values","title":"Return values"},{"anchor":"scope","title":"Scope"},{"anchor":"variable-length-arguments","title":"Variable-length arguments"},{"anchor":"what-are-functions","title":"What are functions?"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Functions are a fundamental concept in programming, allowing for code reusability and modular design. In this article, we'll explore what functions are, their various components, and how to use them, with examples in Python. These principles, however, are widely applicable across many programming languages.","tags":["intro","programming","functions","methods"],"title":"Functions","url":"/en/programming/0200-basic-concepts/03-functions/","year":"2023"},{"date":1679011200,"headings":[],"kind":"term","lang":"en","summary":"","title":"methods","url":"/en/tags/methods/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"conditionals","url":"/en/tags/conditionals/","year":"2023"},{"authors":["Julián Nonino"],"date":1678838400,"headings":[{"anchor":"break","title":"Break"},{"anchor":"break-and-continue","title":"Break and continue"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"conditional-statements","title":"Conditional statements"},{"anchor":"continue","title":"Continue"},{"anchor":"elif","title":"Elif"},{"anchor":"else","title":"Else"},{"anchor":"for","title":"For"},{"anchor":"functions","title":"Functions"},{"anchor":"if","title":"If"},{"anchor":"loops","title":"Loops"},{"anchor":"while","title":"While"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Control flow refers to the order in which the statements, instructions, or function calls of an application are executed. Understanding control flow is crucial in programming, as it enables the creation of dynamic, responsive code. This article will cover the essential aspects of control flow, using Python for examples, but the principles apply to many programming languages.","tags":["intro","programming","control-flow","conditionals","if","loops","for","while"],"title":"Control Flow","url":"/en/programming/0200-basic-concepts/02-control-flow/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"control-flow","url":"/en/tags/control-flow/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"for","url":"/en/tags/for/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"if","url":"/en/tags/if/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"loops","url":"/en/tags/loops/","year":"2023"},{"date":1678838400,"headings":[],"kind":"term","lang":"en","summary":"","title":"while","url":"/en/tags/while/","year":"2023"},{"date":1678665600,"headings":[],"kind":"term","lang":"en","summary":"","title":"data-types","url":"/en/tags/data-types/","year":"2023"},{"date":1678665600,"headings":[],"kind":"term","lang":"en","summary":"","title":"variables","url":"/en/tags/variables/","year":"2023"},{"authors":["Julián Nonino"],"date":1678665600,"headings":[{"anchor":"conclusion","title":"Conclusion"},{"anchor":"data-types","title":"Data types"},{"anchor":"type-conversion","title":"Type conversion"},{"anchor":"variables","title":"Variables"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Variables and data types are fundamental concepts in programming. They play an essential role in storing and managing data within a program. In this article, we'll explore what variables and data types are, using Python as an example, but the concepts are applicable across most programming languages.","tags":["intro","programming","variables","data-types"],"title":"Variables and Data Types","url":"/en/programming/0200-basic-concepts/01-variables-data-types/","year":"2023"},{"date":1678492800,"headings":[],"kind":"term","lang":"en","summary":"","title":"binary","url":"/en/tags/binary/","year":"2023"},{"date":1678492800,"headings":[],"kind":"term","lang":"en","summary":"","title":"boolean-logic","url":"/en/tags/boolean-logic/","year":"2023"},{"date":1678492800,"headings":[],"kind":"term","lang":"en","summary":"","title":"decimal","url":"/en/tags/decimal/","year":"2023"},{"date":1678492800,"headings":[],"kind":"term","lang":"en","summary":"","title":"hexadecimal","url":"/en/tags/hexadecimal/","year":"2023"},{"date":1678492800,"headings":[],"kind":"section","lang":"en","summary":"","title":"Introduction","url":"/en/programming/0100-intro/","year":"2023"},{"authors":["Julián Nonino"],"date":1678492800,"headings":[{"anchor":"binary-numerical-system","title":"Binary numerical system"},{"anchor":"boolean-logic","title":"Boolean logic"},{"anchor":"conclusion","title":"Conclusion"},{"anchor":"hexadecimal-numerical-system","title":"Hexadecimal numerical system"},{"anchor":"truth-tables","title":"Truth tables"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Programming, at its core, involves manipulating numbers and logic. In this article, we will explore two essential numerical systems (Binary and Hexadecimal) and delve into the fundamental principles of Boolean logic. These concepts are vital for anyone beginning their journey in programming.","tags":["intro","programming","decimal","binary","hexadecimal","numerical-systems","boolean-logic"],"title":"Numerical systems and Boolean logic","url":"/en/programming/0100-intro/03-numerical-systems-boolean-logic/","year":"2023"},{"date":1678492800,"headings":[],"kind":"term","lang":"en","summary":"","title":"numerical-systems","url":"/en/tags/numerical-systems/","year":"2023"},{"date":167832e4,"headings":[],"kind":"term","lang":"en","summary":"","title":"install","url":"/en/tags/install/","year":"2023"},{"authors":["Julián Nonino"],"date":167832e4,"headings":[{"anchor":"linux","title":"Linux"},{"anchor":"mac","title":"Mac"},{"anchor":"windows","title":"Windows"}],"kind":"page","lang":"en","series":["Programming"],"summary":"Python is a widely-used programming language for web development, data analysis, scientific computing, and much more. In this article, we'll guide you through the installation process of Python on three major operating systems: Linux, Mac, and Windows. Since Python is often pre-installed on many Linux and Mac systems, this guide also covers checking your existing version and upgrading if necessary.","tags":["intro","programming","python","install","tools"],"title":"Installing Python","url":"/en/programming/0100-intro/02-installing-python/","year":"2023"},{"date":167832e4,"headings":[],"kind":"term","lang":"en","summary":"","title":"tools","url":"/en/tags/tools/","year":"2023"},{"authors":["Julián Nonino"],"date":1678147200,"headings":[],"kind":"page","lang":"en","series":["Programming"],"summary":"Programming is the process of creating instructions that a computer can understand and execute. It is the backbone of modern technology and is used in a wide range of fields, from finance and healthcare to gaming and entertainment. Whether you are building a website, an app, or a complex piece of software, programming is at the core of it all.","tags":["intro","programming"],"title":"Introduction to Programming","url":"/en/programming/0100-intro/01-intro/","year":"2023"},{"date":1674e6,"headings":[],"kind":"term","lang":"en","summary":"","title":"git","url":"/en/tags/git/","year":"2023"},{"date":1674e6,"headings":[],"kind":"term","lang":"en","summary":"","title":"revert","url":"/en/tags/revert/","year":"2023"},{"authors":["Julián Nonino"],"date":1674e6,"headings":[],"kind":"page","lang":"en","summary":"How to discard changes in Git before pushing them.","tags":["vcs","version-control","git","revert"],"title":"Revert a local change in Git","url":"/en/blog/2023/01/revert-a-local-change-in-git/","year":"2023"},{"authors":["Julián Nonino"],"date":1674e6,"headings":[{"anchor":"reverting-a-merge-commit","title":"Reverting a merge commit"},{"anchor":"reverting-multiple-commits","title":"Reverting multiple commits"}],"kind":"page","lang":"en","summary":"Have you ever pushed a change in Git and it was wrong? Here you'll learn how to revert the change, even if the problem was with a merge commit.","tags":["vcs","version-control","git","revert"],"title":"Revert a pushed change in Git","url":"/en/blog/2023/01/revert-a-pushed-change-in-git/","year":"2023"},{"date":1674e6,"headings":[],"kind":"term","lang":"en","summary":"","title":"vcs","url":"/en/tags/vcs/","year":"2023"},{"date":1674e6,"headings":[],"kind":"term","lang":"en","summary":"","title":"version-control","url":"/en/tags/version-control/","year":"2023"},{"date":1664015071,"headings":[{"anchor":"latest-articles","title":"Latest Articles"}],"kind":"home","lang":"en","summary":"Latest Articles Blog Sep 2, 2023 NO IMAGE Continuous Delivery Here you can find information about Continuous Delivery, what is it, which benefits can you expect from it, the... Read more Blog Aug 19, 2023 NO IMAGE Continuous Integration What is Continuous Integration? Which benefits it provides? In this article you can find answers to those questions and... Read more Software Engineering Aug 18, 2023 NO IMAGE Requirements Engineering Requirements engineering is the process of defining, documenting and maintaining requirements for a software system.","title":"Learn-Software.com","url":"/en/","year":"2022"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"2023","url":"/en/archives/2023/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"April","url":"/en/archives/2023/04/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"Archives","url":"/en/archives/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"August","url":"/en/archives/2023/08/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"Blog","url":"/en/posts/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"taxonomy","lang":"en","summary":"","title":"Categories","url":"/en/categories/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"December","url":"/en/archives/2023/12/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"February","url":"/en/archives/2023/02/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"January","url":"/en/archives/2023/01/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"July","url":"/en/archives/2023/07/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"June","url":"/en/archives/2023/06/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"March","url":"/en/archives/2023/03/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"term","lang":"en","summary":"","title":"María Florencia Caro","url":"/en/authors/mfcaro/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"May","url":"/en/archives/2023/05/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"November","url":"/en/archives/2023/11/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"October","url":"/en/archives/2023/10/","year":"0001"},{"date":-62135596800,"headings":[],"kind":"section","lang":"en","summary":"","title":"September","url":"/en/archives/2023/09/","year":"0001"}]