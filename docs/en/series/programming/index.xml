<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Learn-Software.com</title><link>/en/series/programming/</link><description>Recent content in Programming on Learn-Software.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2022-{year} [Learn-Software.com](https://learn-software.com/). All Rights Reserved.</copyright><lastBuildDate>Thu, 28 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/series/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursive functions</title><link>/en/programming/0200-basic-concepts/0205-recursive-functions/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-basic-concepts/0205-recursive-functions/</guid><description>Recursion: the art of calling yourself Imagine a box of mirrors where each mirror reflects what it sees in the next, creating an infinite series of reflections. Recursion in programming is something similar. It is a technique where a function calls itself directly or indirectly1. This creates a cycle where the function solves a problem by dividing it into smaller instances of the same problem, until reaching a simple base case that can be solved directly.</description></item><item><title>Control Flow</title><link>/en/programming/0200-basic-concepts/0203-control-flow/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-basic-concepts/0203-control-flow/</guid><description>Conditions: making decisions in code Life is full of decisions: &amp;ldquo;If it rains, I&amp;rsquo;ll take an umbrella. Otherwise, I&amp;rsquo;ll wear sunglasses.&amp;rdquo; These decisions are also present in the world of programming. Conditions are like questions the computer asks itself. They allow us to make decisions and execute specific code based on a condition1. They can be as simple as &amp;ldquo;Is it raining?&amp;rdquo; or as complex as &amp;ldquo;Is it the weekend and do I have less than $100 in my bank account?</description></item><item><title>Functions</title><link>/en/programming/0200-basic-concepts/0204-functions/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-basic-concepts/0204-functions/</guid><description>What are functions? A function, in simple terms, is a block of code that executes only when called. You can think of it as a small program within your main program, designed to perform a specific task1. A function can also be seen as a black box: we pass an input (parameters), some internal processing occurs, and it produces an output (return value).
Functions allow us to segment our code into logical parts where each part performs a single action.</description></item><item><title>Input and output operations</title><link>/en/programming/0200-basic-concepts/0202-io-operations/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-basic-concepts/0202-io-operations/</guid><description>Keyboard input Python provides built-in functions to read data entered by the user at runtime. This is known as &amp;ldquo;standard input&amp;rdquo; (Downey, 2015).
The input() function allows reading a value entered by the user and assigning it to a variable. For example:
1name = input(&amp;#34;Enter your name: &amp;#34;) This displays the message &amp;ldquo;Enter your name: &amp;quot; and waits for the user to enter text and press Enter. That value is assigned to the name variable (Lutz, 2013).</description></item><item><title>Boolean logic</title><link>/en/programming/0100-intro/0103-boolean-logic/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0103-boolean-logic/</guid><description>Named in honor of George Boole, a 19th-century English mathematician, Boolean logic is a mathematical system that deals with operations resulting in one of two possible outcomes: true or false, typically represented as 1 and 0, respectively1. In his groundbreaking work, &amp;ldquo;An Investigation of the Laws of Thought,&amp;rdquo; Boole laid the foundations for this logic, introducing an algebraic system that could be employed to depict logical structures.
Boolean operations Within Boolean logic, several fundamental operations allow for the manipulation and combination of these binary expressions:</description></item><item><title>Numerical systems</title><link>/en/programming/0100-intro/0102-numerical-systems/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0102-numerical-systems/</guid><description>The decimal system: the bedrock of our daily life From a tender age, we&amp;rsquo;re taught to count using ten digits: 0 through 9. This system, known as the decimal system, underpins almost all our mathematical and financial activities, from basic arithmetic to calculating bank interests1. Its roots trace back to our anatomy: the ten fingers on our hands, making it the most intuitive and natural system for us. Yet, its true charm emanates from its positional nature.</description></item><item><title>The essence of computers</title><link>/en/programming/0100-intro/0101-computers/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0101-computers/</guid><description>To the uninitiated, a computer might seem like a mere box—perhaps sometimes sleek and shiny—but a box nonetheless. Yet, within this &amp;ldquo;box&amp;rdquo; lies a universe of complexity and coordination.
Hardware represents the physical components of a computer: the Central Processing Unit (CPU) which is often likened to the brain of the system, the Random Access Memory (RAM) acting as a temporary storage while tasks are underway, storage devices that retain data, and peripherals like keyboards, mice, and monitors1.</description></item><item><title>Advanced concepts</title><link>/en/programming/0300-oop/08-advanced-concepts/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/08-advanced-concepts/</guid><description>Object-Oriented Programming (OOP) has many advanced concepts that take the programming paradigm to a higher level. These concepts enable developers to write code that is more efficient, flexible, and maintainable. In this article, we will delve into some of these advanced concepts, including multithreading, generics/templates, reflection, serialization and deserialization, and dependency injection. Though we&amp;rsquo;ll provide Python examples where applicable, it&amp;rsquo;s worth noting that some of these concepts might be more prevalent in other programming languages.</description></item><item><title>Associations, aggregations, and compositions</title><link>/en/programming/0300-oop/07-associations/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/07-associations/</guid><description>Understanding relationships between classes is vital for designing robust and maintainable systems. This article, will explore three types of relationships: Associations, Aggregations, and Compositions. We&amp;rsquo;ll look into their definitions, differences, and applications, providing examples in Python and using UML diagrams.
Definitions Association An association represents a “using” relationship between two or more objects. It indicates that objects of one class are somehow connected or utilize objects of another class.
Aggregation Aggregation is a specialized form of association where one class is a part of another class but both exist independently.</description></item><item><title>Abstraction</title><link>/en/programming/0300-oop/06-abstraction/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/06-abstraction/</guid><description>Abstraction is one of the key principles in Object-Oriented Programming (OOP). It plays a vital role in managing complexity by hiding unnecessary details and exposing only what&amp;rsquo;s essential. This article, will explore the concept of abstraction, its purpose, abstract classes, interfaces, and implementation in Python.
Abstraction refers to the practice of hiding the complex reality while exposing only the essential parts. It&amp;rsquo;s like viewing something at a high level without delving into the details.</description></item><item><title>Polymorphism</title><link>/en/programming/0300-oop/05-polymorphism/</link><pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/05-polymorphism/</guid><description>Polymorphism is a Greek word that means &amp;ldquo;many-shaped.&amp;rdquo; In Object-Oriented Programming (OOP), it&amp;rsquo;s a principle that allows objects of different classes to be treated as objects of a common base class. This principle enables greater flexibility and more dynamic behavior in code. This article, will delve into the concept of polymorphism, discussing its types, overloading, overriding, virtual functions, and providing examples in Python.
Polymorphism allows different objects to respond to the same method call in a way that&amp;rsquo;s specific to their individual types.</description></item><item><title>Inheritance</title><link>/en/programming/0300-oop/04-inheritance/</link><pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/04-inheritance/</guid><description>Inheritance is another fundamental concept in Object-Oriented Programming (OOP), allowing for the creation of a new class based on an existing class. This concept helps in reusing code, creating relationships between classes, and building hierarchical structures. This article will explore inheritance in detail, focusing on examples in Python.
Inheritance is a mechanism that allows a class (derived or subclass) to inherit attributes and methods from another class (base or superclass). The derived class can extend or modify the features of the base class.</description></item><item><title>Encapsulation</title><link>/en/programming/0300-oop/03-encapsulation/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/03-encapsulation/</guid><description>Encapsulation is one of the four foundational principles of Object-Oriented Programming (OOP). It plays a crucial role in protecting the integrity of an object by controlling how its data can be accessed and modified. This article, will explore the concept of encapsulation, explain modifiers, and demonstrate how to use getters and setters in Python.
Encapsulation refers to the bundling of data (attributes) and the methods (functions) that operate on the data into a single unit, restricting direct access to some of an object&amp;rsquo;s components.</description></item><item><title>Classes and objects</title><link>/en/programming/0300-oop/02-classes-objects/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/02-classes-objects/</guid><description>Building on our previous introduction to Object-Oriented Programming (OOP), this post will dive deeper into the core concepts of classes and objects. We&amp;rsquo;ll explore their definitions, how to create and use them, and discuss constructors and destructors, with examples in Python.
Definitions Classes A class is a blueprint that defines the structure and behavior of an object. It encapsulates data (attributes) and functions (methods) that operate on the data.
1class Dog: 2 def bark(self): 3 print(&amp;#34;Woof!</description></item><item><title>Introduction</title><link>/en/programming/0300-oop/01-intro/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/01-intro/</guid><description>Object-Oriented Programming (OOP) is a paradigm that helps organize code using real-world concepts, making it more readable, reusable, and maintainable. It&amp;rsquo;s built around the idea that everything can be represented as objects.
OOP emerged in the 1960s with the programming language Simula, but it gained prominence in the 1980s with languages like C++ and Smalltalk. At its core, OOP models the code as &amp;ldquo;objects&amp;rdquo; that bundle both state (attributes) and behaviors (methods).</description></item><item><title>Introduction</title><link>/en/programming/0500-design-patterns/01-introduction/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0500-design-patterns/01-introduction/</guid><description>Types of design patterns Creational patterns: are focused on the process of object creation, abstracting the instantiation process.
Structural patterns: are concerned with the composition of classes or objects, simplifying the structure and identifying relationships between objects.
Behavioral patterns: define ways for objects to communicate and interact, standardizing how objects cooperate.
Examples of design patterns Below are examples of three common design patterns implemented in Python.
Singleton pattern The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance.</description></item><item><title>Testing</title><link>/en/programming/0400-testing/02-testing/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0400-testing/02-testing/</guid><description>Why testing matters? Error Detection: Tests help identify errors and inconsistencies in code. Quality Assurance: Tests ensure that code meets certain quality standards. Refactoring Support: Tests provide a safety net for making changes to existing code. Documentation: Tests can serve as examples, illustrating how code is intended to be used. Types of testing Unit testing Unit testing focuses on testing individual components (or &amp;ldquo;units&amp;rdquo;) of code, like functions or methods.</description></item><item><title>Error Handling and Debugging</title><link>/en/programming/0400-testing/01-error-handling-debugging/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0400-testing/01-error-handling-debugging/</guid><description>Understanding errors In programming, errors are problems in the code that prevent it from running as intended. They can be categorized into:
Syntax Errors: Mistakes in the code&amp;rsquo;s structure, such as missing parentheses or incorrect indentation. Runtime Errors: Errors that occur during execution, such as dividing by zero or accessing an element that does not exist. Logical Errors: Errors in the program&amp;rsquo;s logic that lead to unexpected results. Error handling Error handling is the process of detecting and managing errors in a program.</description></item><item><title>Variables and Data Types</title><link>/en/programming/0200-basic-concepts/0201-variables-data-types/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-basic-concepts/0201-variables-data-types/</guid><description>Variables A variable is a container to store data in the computer&amp;rsquo;s memory. We can think of it as a box with a label. The label is the variable name and inside the box its value is stored.
To declare a variable in Python we just write the name and assign a value:
1age = 28 2price = 19.95 3student = True Variable names must start with letters or underscore, and can only contain letters, numbers and underscores.</description></item><item><title>Set up your development environment</title><link>/en/programming/0100-intro/0104-setup-dev-environment/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0104-setup-dev-environment/</guid><description>Choosing a programming language Choosing a programming language is the first and perhaps the most crucial step in the learning process. Several factors to consider when selecting a language include:
Purpose: What do you want to code for? If it&amp;rsquo;s web development, JavaScript or PHP might be good options. If you&amp;rsquo;re into data science, R or Python might be more appropriate. Community: A language with an active community can be vital for beginners.</description></item></channel></rss>