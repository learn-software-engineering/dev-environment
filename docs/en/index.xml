<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learn-Software.com</title><link>/en/</link><description>Recent content on Learn-Software.com</description><generator>Hugo</generator><language>en</language><atom:link href="/en/index.xml" rel="self" type="application/rss+xml"/><item><title>The Computer</title><link>/en/programming/0100-intro/0101-computers/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0101-computers/</guid><description>&lt;p>To the uninitiated, a computer might seem like a mere box—perhaps sometimes sleek and shiny—but a box nonetheless. Yet, within this &amp;ldquo;&lt;em>box&lt;/em>&amp;rdquo; lies a universe of complexity and coordination.&lt;/p>
&lt;p>&lt;em>&lt;strong>Hardware&lt;/strong>&lt;/em> represents the physical components of a computer: the Central Processing Unit (CPU) which is often likened to the brain of the system, the Random Access Memory (RAM) acting as a temporary storage while tasks are underway, storage devices that retain data, and peripherals like keyboards, mice, and monitors&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Introduction</title><link>/en/software-engineering/0100-intro/01-intro/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0100-intro/01-intro/</guid><description>&lt;h2 id="what-is-software">What is Software?&lt;/h2>
&lt;p>Several thought leaders in the world of computing have defined software in various ways:&lt;/p>
&lt;p>&lt;strong>Ian Sommerville&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:
&lt;em>Computer programs and associated documentation.&lt;/em>&lt;/p>
&lt;p>&lt;strong>Roger S. Pressman&lt;/strong>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:
&lt;em>A collection of computer programs, procedures, rules, and associated documentation and data.&lt;/em>&lt;/p>
&lt;p>&lt;strong>Andrew S. Tanenbaum&lt;/strong>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>:
&lt;em>A series of instructions that tells a computer what to do.&lt;/em>&lt;/p>
&lt;p>&lt;strong>Grady Booch&lt;/strong>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:
&lt;em>Set of items or objects that form a configuration that includes programs, documents, and data.&lt;/em>&lt;/p></description></item><item><title>Numerical Systems</title><link>/en/programming/0100-intro/0102-numerical-systems/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0102-numerical-systems/</guid><description>&lt;h2 id="the-decimal-system-the-bedrock-of-our-daily-life">The decimal system: the bedrock of our daily life&lt;/h2>
&lt;p>From a tender age, we&amp;rsquo;re taught to count using ten digits: 0 through 9. This system, known as the decimal system, underpins almost all our mathematical and financial activities, from basic arithmetic to calculating bank interests&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. Its roots trace back to our anatomy: the ten fingers on our hands, making it the most intuitive and natural system for us. Yet, its true charm emanates from its positional nature.&lt;/p></description></item><item><title>Boolean Logic</title><link>/en/programming/0100-intro/0103-boolean-logic/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0103-boolean-logic/</guid><description>&lt;p>Named in honour of &lt;a href="https://en.wikipedia.org/wiki/George_Boole">George Boole&lt;/a>, a 19th-century English mathematician, Boolean logic is a mathematical system that deals with operations resulting in one of two possible outcomes: true or false, typically represented as 1 and 0, respectively&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In his groundbreaking work, &amp;ldquo;An Investigation of the Laws of Thought,&amp;rdquo; Boole laid the foundations for this logic, introducing an algebraic system that could be employed to depict logical structures.&lt;/p>
&lt;h2 id="boolean-operations">Boolean operations&lt;/h2>
&lt;p>Within Boolean logic, several fundamental operations allow for the manipulation and combination of these binary expressions:&lt;/p></description></item><item><title>Set Up your Development Environment</title><link>/en/programming/0100-intro/0104-setup-dev-environment/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0104-setup-dev-environment/</guid><description>&lt;hr>
&lt;h2 id="choosing-a-programming-language">Choosing a programming language&lt;/h2>
&lt;p>Choosing a programming language is the first and perhaps the most crucial step in the learning process. Several factors to consider when selecting a language include:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Purpose&lt;/strong>: What do you want to code for? If it&amp;rsquo;s web development, JavaScript or PHP might be good options. If you&amp;rsquo;re into data science, R or Python might be more appropriate.&lt;/li>
&lt;li>&lt;strong>Community&lt;/strong>: A language with an active community can be vital for beginners. A vibrant community usually means more resources, tutorials, and solutions available online.&lt;/li>
&lt;li>&lt;strong>Learning curve&lt;/strong>: Some languages are easier to pick up than others. It&amp;rsquo;s essential to pick one that matches your experience level and patience.&lt;/li>
&lt;li>&lt;strong>Job opportunities&lt;/strong>: If you&amp;rsquo;re eyeing a career in programming, researching the job market demand for various languages can be insightful.&lt;/li>
&lt;/ol>
&lt;p>While there are many valuable and potent languages, for the purpose of this course, we&amp;rsquo;ve chosen &lt;a href="https://www.python.org/">&lt;strong>Python&lt;/strong>&lt;/a>. This language is renowned for its simplicity and readability, making it ideal for those just starting out. Moreover, Python boasts an active community and a wide range of applications, from web development to artificial intelligence&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Variables and Data Types</title><link>/en/programming/0200-starting-concepts/0201-variables-data-types/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0201-variables-data-types/</guid><description>&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>A variable is a container to store data in the computer&amp;rsquo;s memory. We can think of it as a box with a label. The label is the variable name and inside the box its value is stored.&lt;/p>
&lt;p>To declare a variable in Python we just write the name and assign a value:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>price &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">19.95&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>student &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Variable names must start with letters or underscore, and can only contain letters, numbers and underscores. It is recommended to use meaningful names that represent the purpose of the variable.&lt;/p></description></item><item><title>Input and output operations</title><link>/en/programming/0200-starting-concepts/0202-io-operations/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0202-io-operations/</guid><description>&lt;h2 id="screen-output">Screen output&lt;/h2>
&lt;p>Python also provides functions to send program output to &amp;ldquo;standard output&amp;rdquo;, usually the screen or terminal&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>The &lt;code>print()&lt;/code> function displays the value passed as a parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Eric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(name) &lt;span style="color:#75715e"># displays &amp;#34;Eric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can print multiple values separated by commas&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>, name, &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># displays &amp;#34;Hello Eric!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also use literal values without assigning to variables&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;2 + 3 =&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e"># displays &amp;#34;2 + 3 = 5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output-formatting">Output formatting&lt;/h3>
&lt;p>Python provides various ways to format output&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>:&lt;/p></description></item><item><title>Flow Control</title><link>/en/programming/0200-starting-concepts/0203-flow-control-structures/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0203-flow-control-structures/</guid><description>&lt;h2 id="conditions-making-decisions-in-code">Conditions: making decisions in code&lt;/h2>
&lt;p>Life is full of decisions: &amp;ldquo;If it rains, I&amp;rsquo;ll take an umbrella. Otherwise, I&amp;rsquo;ll wear sunglasses.&amp;rdquo; These decisions are also present in the world of programming. Conditions are like questions the computer asks itself. They allow us to make decisions and execute specific code based on a condition&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. They can be as simple as &amp;ldquo;Is it raining?&amp;rdquo; or as complex as &amp;ldquo;Is it the weekend and do I have less than $100 in my bank account?&amp;rdquo;.&lt;/p></description></item><item><title>Functions</title><link>/en/programming/0200-starting-concepts/0204-functions/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0204-functions/</guid><description>&lt;h2 id="what-are-functions">What are functions?&lt;/h2>
&lt;p>A function, in simple terms, is a block of code that executes only when called. You can think of it as a small program within your main program, designed to perform a specific task&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. A function can also be seen as a black box: we pass an input (parameters), some internal processing occurs, and it produces an output (return value).&lt;/p>
&lt;p>Functions allow us to segment our code into logical parts where each part performs a single action. This provides several benefits&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p></description></item><item><title>Recursive Functions</title><link>/en/programming/0200-starting-concepts/0205-recursive-functions/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0205-recursive-functions/</guid><description>&lt;h2 id="recursion-the-art-of-calling-yourself">Recursion: the art of calling yourself&lt;/h2>
&lt;p>Imagine a box of mirrors where each mirror reflects what it sees in the next, creating an infinite series of reflections. Recursion in programming is something similar. It is a technique where a function calls itself directly or indirectly&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. This creates a cycle where the function solves a problem by dividing it into smaller instances of the same problem, until reaching a simple base case that can be solved directly.&lt;/p></description></item><item><title>Classes and objects</title><link>/en/programming/0300-oop/0301-classes-objects/</link><pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/0301-classes-objects/</guid><description>&lt;h2 id="anatomy-of-a-class">Anatomy of a class&lt;/h2>
&lt;p>A class acts as a &lt;strong>blueprint or mould&lt;/strong> to construct similar objects, defining their common characteristics and functionalities. It is similar to the blueprint used to construct houses in the same neighbourhood: they all share certain key attributes.&lt;/p>
&lt;p>The typical components of a class are:&lt;/p>
&lt;p>&lt;strong>Attributes (properties)&lt;/strong>: Variables that characterise the object. For example, for a &lt;code>Person&lt;/code> class, attributes like &lt;code>name&lt;/code>, &lt;code>age&lt;/code>, &lt;code>ID&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> age &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Methods&lt;/strong>: Functions that define behaviours. For example, a &lt;code>Person&lt;/code> can &lt;code>walk()&lt;/code>, &lt;code>talk()&lt;/code>, &lt;code>eat()&lt;/code>, etc. They access the attributes to implement said functionality.&lt;/p></description></item><item><title>Requirements Engineering</title><link>/en/software-engineering/0300-requirements-engineering/01-requirements-engineering/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0300-requirements-engineering/01-requirements-engineering/</guid><description>&lt;p>According to Sommerville and Sawyer, a requirement is a statement about an intended product that specifies what it should do or how it should perform&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Requirements identify the goals, needs and constraints that the software must address in order to deliver value. They are a form of specification that serve as the foundation for all subsequent software engineering activities.&lt;/p>
&lt;p>Some key definitions of requirements are:&lt;/p>
&lt;ul>
&lt;li>Description of how the system should behave.&lt;/li>
&lt;li>Features that the software needs to deliver.&lt;/li>
&lt;li>Functionalities that users expect from the software.&lt;/li>
&lt;li>Statements of business rules that software must comply with.&lt;/li>
&lt;li>Constraints on development of the software.&lt;/li>
&lt;/ul>
&lt;p>Requirements convey the intended purpose, context and environment in which the software will operate. They express the underlying motivations for why the software needs to be built by identifying problems faced by users or organization.&lt;/p></description></item><item><title>Encapsulation</title><link>/en/programming/0300-oop/0302-encapsulation/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/0302-encapsulation/</guid><description>&lt;p>The Oxford Dictionary defines encapsulation as &lt;em>&amp;ldquo;enclosed or contained as if in a capsule&amp;rdquo;&lt;/em>. This is precisely what we seek to achieve - &lt;em>&amp;ldquo;packaging&amp;rdquo;&lt;/em> data and code within a single capsule (the class) to hide its internal complexity.&lt;/p>
&lt;p>The formal definition would be:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Encapsulation refers to bundling data and functions that manipulate these data into a single entity or software module.&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;p>That is, keeping related data and behaviours together in order to restrict direct access to that data from other parts of the programme, interacting only through a controlled interface (public API).&lt;/p></description></item><item><title>Continuous Delivery</title><link>/en/blog/2023-09-02-continuous-delivery/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023-09-02-continuous-delivery/</guid><description>&lt;p>Continuous Delivery (CD) is deeply rooted in the first principle of the Agile Manifesto posted in 2001&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&lt;/p>
&lt;/blockquote>
&lt;p>According to Martin Fowler&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, a project is truly embracing Continuous Delivery when:&lt;/p>
&lt;ul>
&lt;li>The software can be deployed at any stage of its lifecycle.&lt;/li>
&lt;li>The team values keeping the software deployment-ready over adding new features.&lt;/li>
&lt;li>Any software version can be deployed to any environment on-demand.&lt;/li>
&lt;/ul>
&lt;p>In many ways, Continuous Delivery is the next step from &lt;a href="../en/blog/2023-08-08-continuous-integration/">Continuous Integration&lt;/a>, seamlessly automating processes all the way to the software&amp;rsquo;s end user.&lt;/p></description></item><item><title>Continuous Integration</title><link>/en/blog/2023-08-08-continuous-integration/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023-08-08-continuous-integration/</guid><description>&lt;p>One of the most pivotal challenges in the realm of software development is effectively integrating changes &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. In a small-scale project steered by a single developer, this challenge might appear to be trivial. However, as the magnitude of the project escalates and more individuals join the development fold, the significance of seamless integration becomes paramount.&lt;/p>
&lt;p>Historically, integration was often an afterthought, relegated to the tail end of the software development process &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. Postponing it to such a late stage not only amplifies the risk of complex, undetected errors but also heightens the tension as delivery dates loom.&lt;/p></description></item><item><title>Revert a local change in Git</title><link>/en/blog/2023-01-28-git-revert-local/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023-01-28-git-revert-local/</guid><description>&lt;p>When we have created a commit locally but have not published it to the remote yet, we can use &lt;code>git reset&lt;/code> to undo the commit and, if we wish, discard the changes.
Although there are several options for &lt;code>git reset&lt;/code> the most used are:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>--soft&lt;/code>: Does not touch the index file or the working tree at all (but resets the head to &lt;COMMIT>, just like all modes do). This leaves all your changed files &amp;ldquo;Changes to be committed&amp;rdquo;, as git status would put it.&lt;/li>
&lt;li>&lt;code>--hard&lt;/code>: Resets the index and working tree. Any changes to tracked files in the working tree since &lt;COMMIT> are discarded. Any untracked files or directories in the way of writing any tracked files are simply deleted.&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://git-scm.com/docs/git-reset">Git reset documentation&lt;/a>
{: style=&amp;ldquo;text-align: right;&amp;rdquo;}&lt;/p></description></item><item><title>Revert a pushed change in Git</title><link>/en/blog/2023-01-18-git-revert-pushed/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023-01-18-git-revert-pushed/</guid><description>&lt;p>When we realized that the last commit was a mistake but we already published it, the command to use is &lt;code>git revert &amp;lt;COMMIT_HASH&amp;gt;&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>First we need to locate the ID of the commit we want to revert, it can be done with &lt;code>git log&lt;/code> or &lt;code>git reflog&lt;/code> commands.&lt;/li>
&lt;li>Then, run the &lt;code>git revert &amp;lt;COMMIT_HASH&amp;gt;&lt;/code> command using the ID obtained in the previous step. Use the options &lt;code>-e&lt;/code> or &lt;code>--edit&lt;/code> to edit the commit message if we like.&lt;/li>
&lt;li>Push our changes so the revert is available for everyone in our group.&lt;/li>
&lt;/ul>
&lt;h2 id="reverting-multiple-commits">Reverting multiple commits&lt;/h2>
&lt;p>If we need to revert multiple commits we can revert them one by one using the &lt;code>--no-commit&lt;/code> option in order to create a single revert commit at the end.&lt;/p></description></item><item><title>Search Results</title><link>/en/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/search/</guid><description/></item></channel></rss>