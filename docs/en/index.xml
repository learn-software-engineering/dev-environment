<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learn-Software.com</title><link>/en/</link><description>Recent content on Learn-Software.com</description><generator>Hugo</generator><language>en</language><copyright>Copyright © 2022-2024 Learn-Software.com. All Rights Reserved.</copyright><lastBuildDate>Wed, 04 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Encapsulation</title><link>/en/programming/0300-oop/0302-encapsulation/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/0302-encapsulation/</guid><description>The Oxford Dictionary defines encapsulation as &amp;ldquo;enclosed or contained as if in a capsule&amp;rdquo;. This is precisely what we seek to achieve - &amp;ldquo;packaging&amp;rdquo; data and code within a single capsule (the class) to hide its internal complexity.
The formal definition would be:
&amp;ldquo;Encapsulation refers to bundling data and functions that manipulate these data into a single entity or software module.&amp;rdquo;1
That is, keeping related data and behaviours together in order to restrict direct access to that data from other parts of the programme, interacting only through a controlled interface (public API).</description></item><item><title>Classes and objects</title><link>/en/programming/0300-oop/0301-classes-objects/</link><pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate><guid>/en/programming/0300-oop/0301-classes-objects/</guid><description>Anatomy of a class A class acts as a blueprint or mould to construct similar objects, defining their common characteristics and functionalities. It is similar to the blueprint used to construct houses in the same neighbourhood: they all share certain key attributes.
The typical components of a class are:
Attributes (properties): Variables that characterise the object. For example, for a Person class, attributes like name, age, ID, etc.
1class Person: 2 id = &amp;#34;&amp;#34; 3 name = &amp;#34;&amp;#34; 4 age = 0 Methods: Functions that define behaviours.</description></item><item><title>Recursive Functions</title><link>/en/programming/0200-starting-concepts/0205-recursive-functions/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0205-recursive-functions/</guid><description>Recursion: the art of calling yourself Imagine a box of mirrors where each mirror reflects what it sees in the next, creating an infinite series of reflections. Recursion in programming is something similar. It is a technique where a function calls itself directly or indirectly1. This creates a cycle where the function solves a problem by dividing it into smaller instances of the same problem, until reaching a simple base case that can be solved directly.</description></item><item><title>Functions</title><link>/en/programming/0200-starting-concepts/0204-functions/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0204-functions/</guid><description>What are functions? A function, in simple terms, is a block of code that executes only when called. You can think of it as a small program within your main program, designed to perform a specific task1. A function can also be seen as a black box: we pass an input (parameters), some internal processing occurs, and it produces an output (return value).
Functions allow us to segment our code into logical parts where each part performs a single action.</description></item><item><title>Flow Control</title><link>/en/programming/0200-starting-concepts/0203-flow-control-structures/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0203-flow-control-structures/</guid><description>Conditions: making decisions in code Life is full of decisions: &amp;ldquo;If it rains, I&amp;rsquo;ll take an umbrella. Otherwise, I&amp;rsquo;ll wear sunglasses.&amp;rdquo; These decisions are also present in the world of programming. Conditions are like questions the computer asks itself. They allow us to make decisions and execute specific code based on a condition1. They can be as simple as &amp;ldquo;Is it raining?&amp;rdquo; or as complex as &amp;ldquo;Is it the weekend and do I have less than $100 in my bank account?</description></item><item><title>Input and output operations</title><link>/en/programming/0200-starting-concepts/0202-io-operations/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0202-io-operations/</guid><description>Screen output Python also provides functions to send program output to &amp;ldquo;standard output&amp;rdquo;, usually the screen or terminal1.
The print() function displays the value passed as a parameter:
1name = &amp;#34;Eric&amp;#34; 2print(name) # displays &amp;#34;Eric&amp;#34; We can print multiple values separated by commas2:
1print(&amp;#34;Hello&amp;#34;, name, &amp;#34;!&amp;#34;) # displays &amp;#34;Hello Eric!&amp;#34; We can also use literal values without assigning to variables3:
1print(&amp;#34;2 + 3 =&amp;#34;, 2 + 3) # displays &amp;#34;2 + 3 = 5&amp;#34; Output formatting Python provides various ways to format output4:</description></item><item><title>Variables and Data Types</title><link>/en/programming/0200-starting-concepts/0201-variables-data-types/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0200-starting-concepts/0201-variables-data-types/</guid><description>Variables A variable is a container to store data in the computer&amp;rsquo;s memory. We can think of it as a box with a label. The label is the variable name and inside the box its value is stored.
To declare a variable in Python we just write the name and assign a value:
1age = 28 2price = 19.95 3student = True Variable names must start with letters or underscore, and can only contain letters, numbers and underscores.</description></item><item><title>Set Up your Development Environment</title><link>/en/programming/0100-intro/0104-setup-dev-environment/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0104-setup-dev-environment/</guid><description>Choosing a programming language Choosing a programming language is the first and perhaps the most crucial step in the learning process. Several factors to consider when selecting a language include:
Purpose: What do you want to code for? If it&amp;rsquo;s web development, JavaScript or PHP might be good options. If you&amp;rsquo;re into data science, R or Python might be more appropriate. Community: A language with an active community can be vital for beginners.</description></item><item><title>Boolean Logic</title><link>/en/programming/0100-intro/0103-boolean-logic/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0103-boolean-logic/</guid><description>Named in honour of George Boole, a 19th-century English mathematician, Boolean logic is a mathematical system that deals with operations resulting in one of two possible outcomes: true or false, typically represented as 1 and 0, respectively1. In his groundbreaking work, &amp;ldquo;An Investigation of the Laws of Thought,&amp;rdquo; Boole laid the foundations for this logic, introducing an algebraic system that could be employed to depict logical structures.
Boolean operations Within Boolean logic, several fundamental operations allow for the manipulation and combination of these binary expressions:</description></item><item><title>Numerical Systems</title><link>/en/programming/0100-intro/0102-numerical-systems/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0102-numerical-systems/</guid><description>The decimal system: the bedrock of our daily life From a tender age, we&amp;rsquo;re taught to count using ten digits: 0 through 9. This system, known as the decimal system, underpins almost all our mathematical and financial activities, from basic arithmetic to calculating bank interests1. Its roots trace back to our anatomy: the ten fingers on our hands, making it the most intuitive and natural system for us. Yet, its true charm emanates from its positional nature.</description></item><item><title>Continuous Delivery</title><link>/en/blog/2023/09/continuous-delivery/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023/09/continuous-delivery/</guid><description>Continuous Delivery (CD) is deeply rooted in the first principle of the Agile Manifesto posted in 20011:
Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
According to Martin Fowler2, a project is truly embracing Continuous Delivery when:
The software can be deployed at any stage of its lifecycle. The team values keeping the software deployment-ready over adding new features. Any software version can be deployed to any environment on-demand.</description></item><item><title>The Computer</title><link>/en/programming/0100-intro/0101-computers/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/en/programming/0100-intro/0101-computers/</guid><description>To the uninitiated, a computer might seem like a mere box—perhaps sometimes sleek and shiny—but a box nonetheless. Yet, within this &amp;ldquo;box&amp;rdquo; lies a universe of complexity and coordination.
Hardware represents the physical components of a computer: the Central Processing Unit (CPU) which is often likened to the brain of the system, the Random Access Memory (RAM) acting as a temporary storage while tasks are underway, storage devices that retain data, and peripherals like keyboards, mice, and monitors1.</description></item><item><title>Continuous Integration</title><link>/en/blog/2023/08/continuous-integration/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023/08/continuous-integration/</guid><description>One of the most pivotal challenges in the realm of software development is effectively integrating changes 1. In a small-scale project steered by a single developer, this challenge might appear to be trivial. However, as the magnitude of the project escalates and more individuals join the development fold, the significance of seamless integration becomes paramount.
Historically, integration was often an afterthought, relegated to the tail end of the software development process 2.</description></item><item><title>Requirements Engineering</title><link>/en/software-engineering/0300-requirements-engineering/01-requirements-engineering/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0300-requirements-engineering/01-requirements-engineering/</guid><description>According to Sommerville and Sawyer, a requirement is a statement about an intended product that specifies what it should do or how it should perform1.
Requirements identify the goals, needs and constraints that the software must address in order to deliver value. They are a form of specification that serve as the foundation for all subsequent software engineering activities.
Some key definitions of requirements are:
Description of how the system should behave.</description></item><item><title>The Deployment phase</title><link>/en/software-engineering/0200-sdlc/06-deployment/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/06-deployment/</guid><description>The main goals of the deployment stage are:
Install and configure the software on production infrastructure. Migrate data from old systems if needed. Run integration, performance, and security tests. Release the software for use by end users. Proper deployment is critical for delivering high quality software that meets customer needs. This article provides a comprehensive overview of the deployment stage, best practices, challenges, and key steps involved.
The deployment environment is usually separate from the development environment and mirrors the actual production infrastructure as closely as possible.</description></item><item><title>The Maintenance phase</title><link>/en/software-engineering/0200-sdlc/07-maintenance/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/07-maintenance/</guid><description>This phase ensures that software remains robust, relevant, and valuable throughout its lifecycle1.
Software maintenance encompasses all activities post-deployment that are not categorized as software evolution2. It&amp;rsquo;s about refining, enhancing, and optimizing software, as well as fixing errors that surface over time.
While creating software is challenging, maintaining it is often even more demanding. With changing user needs, technology advancements, and the inevitable emergence of bugs, ongoing maintenance is essential for software&amp;rsquo;s continued relevance and efficiency1.</description></item><item><title>The Testing phase</title><link>/en/software-engineering/0200-sdlc/05-testing/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/05-testing/</guid><description>Software testing, at its core, is an activity where software undergoes various forms of evaluation. It’s conducted to ensure that the software adheres to specified requirements and doesn&amp;rsquo;t demonstrate unwanted behaviours1. It is a meticulous blend of logic and creativity: logic to methodically navigate predefined paths and creativity to anticipate unexpected scenarios and user behaviours.
Before diving into its components, let&amp;rsquo;s recognize the non-negotiable importance of testing in the SDLC.</description></item><item><title>The Implementation phase</title><link>/en/software-engineering/0200-sdlc/04-implementation/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/04-implementation/</guid><description>The implementation stage holds special significance as it transitions the project from concept to reality1. At its core, it involves the actual coding of the software. After meticulous planning and thorough design, this phase breathes life into the application, constructing the features and functionalities the end-users will eventually interact with2.
Key components The implementation phase is an intricate mesh of various components, each playing a pivotal role in ensuring the resulting software is robust, efficient, and meets user requirements.</description></item><item><title>The System Design phase</title><link>/en/software-engineering/0200-sdlc/03-system-design/</link><pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/03-system-design/</guid><description>It&amp;rsquo;s the stage where we transition from understanding what the software should do (requirements) to how it will achieve this1. It provides the architectural blueprints for the software, establishing the foundation upon which code is written, databases are structured, and systems communicate. It&amp;rsquo;s a vital roadmap for developers, ensuring everyone understands and aligns on how the system will operate.
System design typically breaks down into two sub-categories:
High-Level design (HLD): think of this as the macro view.</description></item><item><title>The Planning phase</title><link>/en/software-engineering/0200-sdlc/02-planning/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/02-planning/</guid><description>At its core, planning in software development is about establishing a clear vision for the software project, determining what you want to achieve, and figuring out how best to achieve it1. It&amp;rsquo;s akin to mapping out a journey before embarking on it, ensuring you have all the necessary tools and knowledge to navigate through the challenges ahead.
Key components Requirement gathering and analysis When we talk about requirements, we&amp;rsquo;re essentially discussing the needs, desires, and constraints of the software project1.</description></item><item><title>Introduction</title><link>/en/software-engineering/0200-sdlc/01-introduction/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0200-sdlc/01-introduction/</guid><description>The SDLC is a framework encompassing the tasks required for the entire software development process. It serves as a structured guide used by professionals to design, develop, and test high-quality software, ensuring the final product aligns with customer expectations, is delivered timely, and remains within budget1. It&amp;rsquo;s essential to note that while the SDLC provides a foundational structure, its actual implementation can vary based on the chosen development methodology, be it Waterfall, Agile, or others.</description></item><item><title>Introduction</title><link>/en/software-engineering/0100-intro/01-intro/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>/en/software-engineering/0100-intro/01-intro/</guid><description>What is Software? Several thought leaders in the world of computing have defined software in various ways:
Ian Sommerville1: Computer programs and associated documentation.
Roger S. Pressman2: A collection of computer programs, procedures, rules, and associated documentation and data.
Andrew S. Tanenbaum3: A series of instructions that tells a computer what to do.
Grady Booch4: Set of items or objects that form a configuration that includes programs, documents, and data.</description></item><item><title>Revert a local change in Git</title><link>/en/blog/2023/01/revert-a-local-change-in-git/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023/01/revert-a-local-change-in-git/</guid><description>When we have created a commit locally but have not published it to the remote yet, we can use git reset to undo the commit and, if we wish, discard the changes. Although there are several options for git reset the most used are:
--soft: Does not touch the index file or the working tree at all (but resets the head to , just like all modes do). This leaves all your changed files &amp;ldquo;Changes to be committed&amp;rdquo;, as git status would put it.</description></item><item><title>Revert a pushed change in Git</title><link>/en/blog/2023/01/revert-a-pushed-change-in-git/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/en/blog/2023/01/revert-a-pushed-change-in-git/</guid><description>When we realized that the last commit was a mistake but we already published it, the command to use is git revert &amp;lt;COMMIT_HASH&amp;gt;.
First we need to locate the ID of the commit we want to revert, it can be done with git log or git reflog commands. Then, run the git revert &amp;lt;COMMIT_HASH&amp;gt; command using the ID obtained in the previous step. Use the options -e or --edit to edit the commit message if we like.</description></item></channel></rss>