<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design patterns on Learn-Software.com</title><link>/en/programming/0500-design-patterns/</link><description>Recent content in Design patterns on Learn-Software.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 27 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/programming/0500-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/en/programming/0500-design-patterns/01-introduction/</link><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><guid>/en/programming/0500-design-patterns/01-introduction/</guid><description>Types of design patterns Creational patterns: are focused on the process of object creation, abstracting the instantiation process.
Structural patterns: are concerned with the composition of classes or objects, simplifying the structure and identifying relationships between objects.
Behavioral patterns: define ways for objects to communicate and interact, standardizing how objects cooperate.
Examples of design patterns Below are examples of three common design patterns implemented in Python.
Singleton pattern The Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance.</description></item></channel></rss>