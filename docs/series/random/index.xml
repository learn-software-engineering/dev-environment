<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Random on Learn-Software.com</title><link>/series/random/</link><description>Recent content in Random on Learn-Software.com</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 02 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="/series/random/index.xml" rel="self" type="application/rss+xml"/><item><title>Revert a local change in Git</title><link>/posts/random/01-git-revert-local/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/posts/random/01-git-revert-local/</guid><description>When we have created a commit locally but have not published it to the remote yet, we can use git reset to undo the commit and, if we wish, discard the changes. Although there are several options for git reset the most used are:
--soft: Does not touch the index file or the working tree at all (but resets the head to , just like all modes do). This leaves all your changed files &amp;ldquo;Changes to be committed&amp;rdquo;, as git status would put it.</description></item><item><title>Revert a pushed change in Git</title><link>/posts/random/02-git-revert-pushed/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/posts/random/02-git-revert-pushed/</guid><description>When we realized that the last commit was a mistake but we already published it, the command to use is git revert &amp;lt;COMMIT_HASH&amp;gt;.
First we need to locate the ID of the commit we want to revert, it can be done with git log or git reflog commands. Then, run the git revert &amp;lt;COMMIT_HASH&amp;gt; command using the ID obtained in the previous step. Use the options -e or --edit to edit the commit message if we like.</description></item><item><title>Continuous Delivery</title><link>/posts/random/04-continuous-delivery/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/posts/random/04-continuous-delivery/</guid><description>Continuous Delivery (CD) is deeply rooted in the first principle of the Agile Manifesto posted in 20011:
Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
According to Martin Fowler2, a project is truly embracing Continuous Delivery when:
The software can be deployed at any stage of its lifecycle. The team values keeping the software deployment-ready over adding new features. Any software version can be deployed to any environment on-demand.</description></item><item><title>Continuous Integration</title><link>/posts/random/03-continuous-integration/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>/posts/random/03-continuous-integration/</guid><description>One of the most pivotal challenges in the realm of software development is effectively integrating changes 1. In a small-scale project steered by a single developer, this challenge might appear to be trivial. However, as the magnitude of the project escalates and more individuals join the development fold, the significance of seamless integration becomes paramount.
Historically, integration was often an afterthought, relegated to the tail end of the software development process 2.</description></item></channel></rss>