<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Learn-Software.com</title><link>/tags/programming/</link><description>Recent content in Programming on Learn-Software.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 28 May 2025 09:14:48 +0100</lastBuildDate><atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrays</title><link>/programming/data-structures/arrays/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/arrays/</guid><description>&lt;p>An array is a data structure that represents a set of elements, which are accessed through contiguous numeric indices ranging from 0 to the size of the array minus 1. Arrays provide fast, direct access to elements based on their position.&lt;/p>
&lt;p>In languages like Python and Ruby, arrays are known as &amp;rsquo;lists&amp;rsquo;. In Javascript they are known as &amp;lsquo;arrays&amp;rsquo;.&lt;/p>
&lt;p>Arrays are typically homogeneous, storing elements of the same type like integers, strings, etc. Some languages allow heterogeneous arrays with values of different types.&lt;/p></description></item><item><title>Variables and Data Types</title><link>/programming/starting-concepts/variables-data-types/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/starting-concepts/variables-data-types/</guid><description>&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>A variable is a container to store data in the computer&amp;rsquo;s memory. We can think of it as a box with a label. The label is the variable name and inside the box its value is stored.&lt;/p>
&lt;p>To declare a variable in Python we just write the name and assign a value:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>price &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">19.95&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>student &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Variable names must start with letters or underscore, and can only contain letters, numbers and underscores. It is recommended to use meaningful names that represent the purpose of the variable.&lt;/p></description></item><item><title>The Computer</title><link>/programming/intro/computers/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/intro/computers/</guid><description>&lt;p>To the uninitiated, a computer might seem like a mere box—perhaps sometimes sleek and shiny—but a box nonetheless. Yet, within this &amp;ldquo;&lt;em>box&lt;/em>&amp;rdquo; lies a universe of complexity and coordination.&lt;/p>
&lt;p>&lt;em>&lt;strong>Hardware&lt;/strong>&lt;/em> represents the physical components of a computer: the Central Processing Unit (CPU) which is often likened to the brain of the system, the Random Access Memory (RAM) acting as a temporary storage while tasks are underway, storage devices that retain data, and peripherals like keyboards, mice, and monitors.&lt;/p></description></item><item><title>Maps (Dictionaries)</title><link>/programming/data-structures/maps/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/maps/</guid><description>&lt;p>A dictionary, or map, consists of a collection of key-value pairs. The key is used to access the associated value. Keys must be unique within a dictionary. Values can be repeated.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-map.jpg" alt="Diagram of a map">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Add/update:&lt;/strong> Inserts a key-value pair. If the key existed, its value is replaced.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Get value:&lt;/strong> Accesses the value given a key.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>value &lt;span style="color:#f92672">=&lt;/span> dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Delete:&lt;/strong> Removes a key-value pair from the dictionary.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">del&lt;/span> dictionary[&lt;span style="color:#e6db74">&amp;#39;key&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;strong>Traverse:&lt;/strong> Iterate over the keys, values or pairs of the dictionary.
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> dictionary:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(key, dictionary[key]) &lt;span style="color:#75715e"># key, value&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="creating-a-dictionary-or-map">Creating a dictionary or map&lt;/h2>
&lt;p>The syntax for creating maps or dictionaries in Python is:&lt;/p></description></item><item><title>Input and output operations</title><link>/programming/starting-concepts/io-operations/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/starting-concepts/io-operations/</guid><description>&lt;h2 id="screen-output">Screen output&lt;/h2>
&lt;p>Python also provides functions to send program output to &amp;ldquo;standard output&amp;rdquo;, usually the screen or terminal.&lt;/p>
&lt;p>The &lt;code>print()&lt;/code> function displays the value passed as a parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Eric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(name) &lt;span style="color:#75715e"># displays &amp;#34;Eric&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can print multiple values separated by commas:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>, name, &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># displays &amp;#34;Hello Eric!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also use literal values without assigning to variables:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;2 + 3 =&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e"># displays &amp;#34;2 + 3 = 5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="output-formatting">Output formatting&lt;/h3>
&lt;p>Python provides various ways to format output:&lt;/p></description></item><item><title>Numerical Systems</title><link>/programming/intro/numerical-systems/</link><pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/intro/numerical-systems/</guid><description>&lt;h2 id="the-decimal-system-the-bedrock-of-our-daily-life">The decimal system: the bedrock of our daily life&lt;/h2>
&lt;p>From a tender age, we&amp;rsquo;re taught to count using ten digits: 0 through 9. This system, known as the decimal system, underpins almost all our mathematical and financial activities, from basic arithmetic to calculating bank interests. Its roots trace back to our anatomy: the ten fingers on our hands, making it the most intuitive and natural system for us. Yet, its true charm emanates from its positional nature.&lt;/p></description></item><item><title>Linked Lists</title><link>/programming/data-structures/linked-lists/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/linked-lists/</guid><description>&lt;p>A linked list is composed of &lt;code>nodes&lt;/code> where each node has two parts:&lt;/p>
&lt;ul>
&lt;li>Data or information&lt;/li>
&lt;li>Reference to the next node&lt;/li>
&lt;/ul>
&lt;p>Nodes are organized sequentially, each pointing to the next. The last node points to null to indicate the end.&lt;/p>
&lt;p>This dynamic structure allows efficient insertion and deletion of nodes.&lt;/p>
&lt;hr>
&lt;h2 id="types-of-linked-lists">Types of linked lists&lt;/h2>
&lt;p>There are several types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Singly linked:&lt;/strong> Each node points to the next one. Useful for queues and stacks.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-linked-list-single.jpg" alt="Diagram of a singly linked list">&lt;/p></description></item><item><title>Flow Control</title><link>/programming/starting-concepts/flow-control-structures/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/starting-concepts/flow-control-structures/</guid><description>&lt;h2 id="conditions-making-decisions-in-code">Conditions: making decisions in code&lt;/h2>
&lt;p>Life is full of decisions: &amp;ldquo;If it rains, I&amp;rsquo;ll take an umbrella. Otherwise, I&amp;rsquo;ll wear sunglasses.&amp;rdquo; These decisions are also present in the world of programming. Conditions are like questions the computer asks itself. They allow us to make decisions and execute specific code based on a condition. They can be as simple as &amp;ldquo;Is it raining?&amp;rdquo; or as complex as &amp;ldquo;Is it the weekend and do I have less than $100 in my bank account?&amp;rdquo;.&lt;/p></description></item><item><title>Boolean Logic</title><link>/programming/intro/boolean-logic/</link><pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/intro/boolean-logic/</guid><description>&lt;p>Named in honour of &lt;a href="https://en.wikipedia.org/wiki/George_Boole">George Boole&lt;/a>, a 19th-century English mathematician, Boolean logic is a mathematical system that deals with operations resulting in one of two possible outcomes: true or false, typically represented as 1 and 0, respectively. In his groundbreaking work, &amp;ldquo;An Investigation of the Laws of Thought,&amp;rdquo; Boole laid the foundations for this logic, introducing an algebraic system that could be employed to depict logical structures.&lt;/p>
&lt;hr>
&lt;h2 id="boolean-operations">Boolean operations&lt;/h2>
&lt;p>Within Boolean logic, several fundamental operations allow for the manipulation and combination of these binary expressions:&lt;/p></description></item><item><title>Stacks</title><link>/programming/data-structures/stacks/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/stacks/</guid><description>&lt;p>The &lt;strong>LIFO&lt;/strong> nature of stacks is due to the fact that only the top element can be accessed and manipulated. The operation of placing an element on the stack is known as &lt;em>&amp;ldquo;push&amp;rdquo;&lt;/em>, while removing an element from the stack is a &lt;em>&amp;ldquo;pop&amp;rdquo;&lt;/em>. The LIFO operation causes the last element placed in a stack to be the first to be removed.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-stack.jpg" alt="Diagram of a stack">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The primary operations supported by a stack structure are:&lt;/p></description></item><item><title>Functions</title><link>/programming/starting-concepts/functions/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/starting-concepts/functions/</guid><description>&lt;h2 id="what-are-functions">What are functions?&lt;/h2>
&lt;p>A function, in simple terms, is a block of code that executes only when called. You can think of it as a small program within your main program, designed to perform a specific task. A function can also be seen as a black box: we pass an input (parameters), some internal processing occurs, and it produces an output (return value).&lt;/p>
&lt;p>Functions allow us to segment our code into logical parts where each part performs a single action. This provides several benefits:&lt;/p></description></item><item><title>Set Up your Development Environment</title><link>/programming/intro/setup-dev-environment/</link><pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/intro/setup-dev-environment/</guid><description>&lt;h2 id="choosing-a-programming-language">Choosing a programming language&lt;/h2>
&lt;p>Choosing a programming language is the first and perhaps the most crucial step in the learning process. Several factors to consider when selecting a language include:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Purpose&lt;/strong>: What do you want to code for? If it&amp;rsquo;s web development, JavaScript or PHP might be good options. If you&amp;rsquo;re into data science, R or Python might be more appropriate.&lt;/li>
&lt;li>&lt;strong>Community&lt;/strong>: A language with an active community can be vital for beginners. A vibrant community usually means more resources, tutorials, and solutions available online.&lt;/li>
&lt;li>&lt;strong>Learning curve&lt;/strong>: Some languages are easier to pick up than others. It&amp;rsquo;s essential to pick one that matches your experience level and patience.&lt;/li>
&lt;li>&lt;strong>Job opportunities&lt;/strong>: If you&amp;rsquo;re eyeing a career in programming, researching the job market demand for various languages can be insightful.&lt;/li>
&lt;/ol>
&lt;p>While there are many valuable and potent languages, for the purpose of this course, we&amp;rsquo;ve chosen &lt;a href="https://www.python.org/">&lt;strong>Python&lt;/strong>&lt;/a>. This language is renowned for its simplicity and readability, making it ideal for those just starting out. Moreover, Python boasts an active community and a wide range of applications, from web development to artificial intelligence.&lt;/p></description></item><item><title>Queues</title><link>/programming/data-structures/queues/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/queues/</guid><description>&lt;p>The FIFO (first in, first out) nature of queues is because only the initial element can be accessed and manipulated. When an element is added to the queue it is known as &lt;em>&amp;ldquo;enqueue&amp;rdquo;&lt;/em>, while removing an element is called &lt;em>&amp;ldquo;dequeue&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>This causes the first element to be added to the queue to also be the first to be removed, hence its FIFO behaviour.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-queue.jpg" alt="Diagram of a queue">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The basic queue operations are:&lt;/p></description></item><item><title>Recursive Functions</title><link>/programming/starting-concepts/recursive-functions/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>/programming/starting-concepts/recursive-functions/</guid><description>&lt;h2 id="recursion-the-art-of-calling-yourself">Recursion: the art of calling yourself&lt;/h2>
&lt;p>Imagine a box of mirrors where each mirror reflects what it sees in the next, creating an infinite series of reflections. Recursion in programming is something similar. It is a technique where a function calls itself directly or indirectly. This creates a cycle where the function solves a problem by dividing it into smaller instances of the same problem, until reaching a simple base case that can be solved directly.&lt;/p></description></item></channel></rss>