<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linked Lists on Learn-Software.com</title><link>/tags/linked-lists/</link><description>Recent content in Linked Lists on Learn-Software.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 07 Mar 2025 15:26:52 -0300</lastBuildDate><atom:link href="/tags/linked-lists/index.xml" rel="self" type="application/rss+xml"/><item><title>Linked Lists</title><link>/programming/data-structures/linked-lists/</link><pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/linked-lists/</guid><description>&lt;p>A linked list is composed of &lt;code>nodes&lt;/code> where each node has two parts:&lt;/p>
&lt;ul>
&lt;li>Data or information&lt;/li>
&lt;li>Reference to the next node&lt;/li>
&lt;/ul>
&lt;p>Nodes are organized sequentially, each pointing to the next. The last node points to null to indicate the end.&lt;/p>
&lt;p>This dynamic structure allows efficient insertion and deletion of nodes.&lt;/p>
&lt;hr>
&lt;h2 id="types-of-linked-lists">Types of linked lists&lt;/h2>
&lt;p>There are several types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Singly linked:&lt;/strong> Each node points to the next one. Useful for queues and stacks.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-linked-list-single.jpg" alt="Diagram of a singly linked list">&lt;/p></description></item><item><title>Stacks</title><link>/programming/data-structures/stacks/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/stacks/</guid><description>&lt;p>The &lt;strong>LIFO&lt;/strong> nature of stacks is due to the fact that only the top element can be accessed and manipulated. The operation of placing an element on the stack is known as &lt;em>&amp;ldquo;push&amp;rdquo;&lt;/em>, while removing an element from the stack is a &lt;em>&amp;ldquo;pop&amp;rdquo;&lt;/em>. The LIFO operation causes the last element placed in a stack to be the first to be removed.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-stack.jpg" alt="Diagram of a stack">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The primary operations supported by a stack structure are:&lt;/p></description></item><item><title>Queues</title><link>/programming/data-structures/queues/</link><pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate><guid>/programming/data-structures/queues/</guid><description>&lt;p>The FIFO (first in, first out) nature of queues is because only the initial element can be accessed and manipulated. When an element is added to the queue it is known as &lt;em>&amp;ldquo;enqueue&amp;rdquo;&lt;/em>, while removing an element is called &lt;em>&amp;ldquo;dequeue&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>This causes the first element to be added to the queue to also be the first to be removed, hence its FIFO behaviour.&lt;/p>
&lt;p>&lt;img src="../../images/content/programming/data-structures/diagram-queue.jpg" alt="Diagram of a queue">&lt;/p>
&lt;hr>
&lt;h2 id="main-operations">Main operations&lt;/h2>
&lt;p>The basic queue operations are:&lt;/p></description></item></channel></rss>