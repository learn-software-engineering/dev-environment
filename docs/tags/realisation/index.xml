<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Realisation on Learn-Software.com</title><link>/tags/realisation/</link><description>Recent content in Realisation on Learn-Software.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 09 Mar 2025 17:02:13 -0300</lastBuildDate><atom:link href="/tags/realisation/index.xml" rel="self" type="application/rss+xml"/><item><title>Realisation (Implementation)</title><link>/programming/oop/class-relations/realisation/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/class-relations/realisation/</guid><description>&lt;p>Key characteristics of realisation:&lt;/p>
&lt;ul>
&lt;li>It represents a contract that the implementing class must fulfil.&lt;/li>
&lt;li>The class must provide implementations for all methods declared in the interface.&lt;/li>
&lt;li>It allows for polymorphism through interfaces.&lt;/li>
&lt;/ul>
&lt;p>Python doesn&amp;rsquo;t have a built-in interface concept like some other languages (e.g., Java), but we can simulate interfaces using abstract base classes. Here&amp;rsquo;s an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> abc &lt;span style="color:#f92672">import&lt;/span> ABC, abstractmethod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Drawable&lt;/span>(ABC):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span>(Drawable):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Drawing a circle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span>(Drawable):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Drawing a square&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">draw_shape&lt;/span>(shape: Drawable):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(shape&lt;span style="color:#f92672">.&lt;/span>draw())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Creating instances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>circle &lt;span style="color:#f92672">=&lt;/span> Circle()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>square &lt;span style="color:#f92672">=&lt;/span> Square()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Using polymorphism through the interface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draw_shape(circle) &lt;span style="color:#75715e"># Output: Drawing a circle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>draw_shape(square) &lt;span style="color:#75715e"># Output: Drawing a square&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, &lt;code>Drawable&lt;/code> is an abstract base class that acts like an interface. Both &lt;code>Circle&lt;/code> and &lt;code>Square&lt;/code> implement the &lt;code>Drawable&lt;/code> interface by providing their own implementation of the &lt;code>draw&lt;/code> method.&lt;/p></description></item></channel></rss>