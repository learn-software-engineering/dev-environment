<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inheritance on Learn-Software.com</title><link>/tags/inheritance/</link><description>Recent content in Inheritance on Learn-Software.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 07 Dec 2024 23:40:41 +0000</lastBuildDate><atom:link href="/tags/inheritance/index.xml" rel="self" type="application/rss+xml"/><item><title>Inheritance</title><link>/programming/oop/class-relations/inheritance/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/class-relations/inheritance/</guid><description>&lt;p>Key characteristics of inheritance:&lt;/p>
&lt;ul>
&lt;li>It promotes code reuse and establishes a hierarchy between classes.&lt;/li>
&lt;li>The subclass inherits all public and protected members from the superclass.&lt;/li>
&lt;li>The subclass can add its own members and override inherited members.&lt;/li>
&lt;li>It supports the concept of polymorphism.&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at an example to illustrate inheritance:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span>(Animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> says Woof!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Cat&lt;/span>(Animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">speak&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> says Meow!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Creating instances&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dog &lt;span style="color:#f92672">=&lt;/span> Dog(&lt;span style="color:#e6db74">&amp;#34;Buddy&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#f92672">=&lt;/span> Cat(&lt;span style="color:#e6db74">&amp;#34;Whiskers&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(dog&lt;span style="color:#f92672">.&lt;/span>speak()) &lt;span style="color:#75715e"># Output: Buddy says Woof!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(cat&lt;span style="color:#f92672">.&lt;/span>speak()) &lt;span style="color:#75715e"># Output: Whiskers says Meow!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Demonstrating polymorphism&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">animal_sound&lt;/span>(animal):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(animal&lt;span style="color:#f92672">.&lt;/span>speak())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>animal_sound(dog) &lt;span style="color:#75715e"># Output: Buddy says Woof!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>animal_sound(cat) &lt;span style="color:#75715e"># Output: Whiskers says Meow!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we have a base class &lt;code>Animal&lt;/code> and two derived classes &lt;code>Dog&lt;/code> and &lt;code>Cat&lt;/code>. Both &lt;code>Dog&lt;/code> and &lt;code>Cat&lt;/code> inherit from &lt;code>Animal&lt;/code> and override the &lt;code>speak&lt;/code> method.&lt;/p></description></item><item><title>Inheritance</title><link>/programming/oop/the-four-pillars/inheritance/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><guid>/programming/oop/the-four-pillars/inheritance/</guid><description>&lt;p>Key aspects of inheritance include:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Code reusability&lt;/strong>: Inheritance allows us to reuse code from existing classes, reducing redundancy and promoting efficient development.&lt;/li>
&lt;li>&lt;strong>Hierarchical classification&lt;/strong>: It enables the creation of class hierarchies, representing relationships and commonalities among objects.&lt;/li>
&lt;li>&lt;strong>Extensibility&lt;/strong>: New functionality can be added to existing classes without modifying them, following the open-closed principle.&lt;/li>
&lt;li>&lt;strong>Polymorphism&lt;/strong>: Inheritance is a prerequisite for runtime polymorphism (which we&amp;rsquo;ll discuss in detail later).&lt;/li>
&lt;/ol>
&lt;h3 id="types-of-inheritance">Types of inheritance&lt;/h3>
&lt;p>There are several types of inheritance, though not all programming languages support all types. The main types are:&lt;/p></description></item></channel></rss>